<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MediaBrowser.Controller</name>
    </assembly>
    <members>
        <member name="T:MediaBrowser.Controller.Authentication.AuthenticationException">
            <summary>
            The exception that is thrown when an attempt to authenticate fails.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Authentication.AuthenticationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Authentication.AuthenticationException"/> class.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Authentication.AuthenticationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Authentication.AuthenticationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Authentication.AuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Authentication.AuthenticationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:MediaBrowser.Controller.BaseItemManager.BaseItemManager">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.BaseItemManager.BaseItemManager.#ctor(MediaBrowser.Controller.Configuration.IServerConfigurationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.BaseItemManager.BaseItemManager"/> class.
            </summary>
            <param name="serverConfigurationManager">Instance of the <see cref="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager"/> interface.</param>
        </member>
        <member name="P:MediaBrowser.Controller.BaseItemManager.BaseItemManager.MetadataRefreshThrottler">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.BaseItemManager.BaseItemManager.IsMetadataFetcherEnabled(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.BaseItemManager.BaseItemManager.IsImageFetcherEnabled(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.BaseItemManager.BaseItemManager.OnConfigurationUpdated(System.Object,System.EventArgs)">
            <summary>
            Called when the configuration is updated.
            It will refresh the metadata throttler if the relevant config changed.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.BaseItemManager.BaseItemManager.SetupMetadataThrottler">
            <summary>
            Creates the metadata refresh throttler.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.BaseItemManager.BaseItemManager.GetMetadataRefreshConcurrency">
            <summary>
            Returns the metadata refresh concurrency.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.BaseItemManager.IBaseItemManager">
            <summary>
            The <c>BaseItem</c> manager.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.BaseItemManager.IBaseItemManager.MetadataRefreshThrottler">
            <summary>
            Gets the semaphore used to limit the amount of concurrent metadata refreshes.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.BaseItemManager.IBaseItemManager.IsMetadataFetcherEnabled(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,System.String)">
            <summary>
            Is metadata fetcher enabled.
            </summary>
            <param name="baseItem">The base item.</param>
            <param name="libraryOptions">The library options.</param>
            <param name="name">The metadata fetcher name.</param>
            <returns><c>true</c> if metadata fetcher is enabled, else false.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.BaseItemManager.IBaseItemManager.IsImageFetcherEnabled(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,System.String)">
            <summary>
            Is image fetcher enabled.
            </summary>
            <param name="baseItem">The base item.</param>
            <param name="libraryOptions">The library options.</param>
            <param name="name">The image fetcher name.</param>
            <returns><c>true</c> if image fetcher is enabled, else false.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.IChannel.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.IChannel.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.IChannel.DataVersion">
            <summary>
            Gets the data version.
            </summary>
            <value>The data version.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.IChannel.HomePageUrl">
            <summary>
            Gets the home page URL.
            </summary>
            <value>The home page URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.IChannel.ParentalRating">
            <summary>
            Gets the parental rating.
            </summary>
            <value>The parental rating.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannel.GetChannelFeatures">
            <summary>
            Gets the channel information.
            </summary>
            <returns>ChannelFeatures.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannel.IsEnabledFor(System.String)">
            <summary>
            Determines whether [is enabled for] [the specified user].
            </summary>
            <param name="userId">The user identifier.</param>
            <returns><c>true</c> if [is enabled for] [the specified user]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannel.GetChannelItems(MediaBrowser.Controller.Channels.InternalChannelItemQuery,System.Threading.CancellationToken)">
            <summary>
            Gets the channel items.
            </summary>
            <param name="query">The query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IEnumerable{ChannelItem}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannel.GetChannelImage(MediaBrowser.Model.Entities.ImageType,System.Threading.CancellationToken)">
            <summary>
            Gets the channel image.
            </summary>
            <param name="type">The type.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{DynamicImageResponse}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannel.GetSupportedChannelImages">
            <summary>
            Gets the supported channel images.
            </summary>
            <returns>IEnumerable{ImageType}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannelManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Channels.IChannel})">
            <summary>
            Adds the parts.
            </summary>
            <param name="channels">The channels.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannelManager.GetChannelFeatures(System.Nullable{System.Guid})">
            <summary>
            Gets the channel features.
            </summary>
            <param name="id">The identifier.</param>
            <returns>ChannelFeatures.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannelManager.GetAllChannelFeatures">
            <summary>
            Gets all channel features.
            </summary>
            <returns>IEnumerable{ChannelFeatures}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannelManager.GetChannel(System.String)">
            <summary>
            Gets the channel.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Channel.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannelManager.GetChannelsInternal(MediaBrowser.Model.Channels.ChannelQuery)">
            <summary>
            Gets the channels internal.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannelManager.GetChannels(MediaBrowser.Model.Channels.ChannelQuery)">
            <summary>
            Gets the channels.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannelManager.GetLatestChannelItems(MediaBrowser.Controller.Entities.InternalItemsQuery,System.Threading.CancellationToken)">
            <summary>
            Gets the latest media.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannelManager.GetLatestChannelItemsInternal(MediaBrowser.Controller.Entities.InternalItemsQuery,System.Threading.CancellationToken)">
            <summary>
            Gets the latest media.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannelManager.GetChannelItems(MediaBrowser.Controller.Entities.InternalItemsQuery,System.Threading.CancellationToken)">
            <summary>
            Gets the channel items.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannelManager.GetChannelItemsInternal(MediaBrowser.Controller.Entities.InternalItemsQuery,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Gets the channel items internal.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannelManager.GetStaticMediaSources(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <summary>
            Gets the channel item media sources.
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IEnumerable{MediaSourceInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IHasCacheKey.GetCacheKey(System.String)">
            <summary>
            Gets the cache key.
            </summary>
            <param name="userId">The user identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.MediaTypes">
            <summary>
            Gets or sets the media types.
            </summary>
            <value>The media types.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.ContentTypes">
            <summary>
            Gets or sets the content types.
            </summary>
            <value>The content types.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.MaxPageSize">
            <summary>
            Represents the maximum number of records the channel allows retrieving at a time.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.DefaultSortFields">
            <summary>
            Gets or sets the default sort orders.
            </summary>
            <value>The default sort orders.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.SupportsSortOrderToggle">
            <summary>
            Indicates if a sort ascending/descending toggle is supported or not.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.AutoRefreshLevels">
            <summary>
            Gets or sets the automatic refresh levels.
            </summary>
            <value>The automatic refresh levels.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.DailyDownloadLimit">
            <summary>
            Gets or sets the daily download limit.
            </summary>
            <value>The daily download limit.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.SupportsContentDownloading">
            <summary>
            Gets or sets a value indicating whether [supports downloading].
            </summary>
            <value><c>true</c> if [supports downloading]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IRequiresMediaInfoCallback.GetChannelItemMediaInfo(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the channel item media information.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.ISearchableChannel.Search(MediaBrowser.Controller.Channels.ChannelSearchInfo,System.Threading.CancellationToken)">
            <summary>
            Searches the specified search term.
            </summary>
            <param name="searchInfo">The search information.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IEnumerable{ChannelItemInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.ISupportsLatestMedia.GetLatestMedia(MediaBrowser.Controller.Channels.ChannelLatestMediaSearch,System.Threading.CancellationToken)">
            <summary>
            Gets the latest media.
            </summary>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IEnumerable{ChannelItemInfo}}.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Chapters.IChapterManager">
            <summary>
            Interface IChapterManager.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Chapters.IChapterManager.SaveChapters(System.Guid,System.Collections.Generic.IReadOnlyList{MediaBrowser.Model.Entities.ChapterInfo})">
            <summary>
            Saves the chapters.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Collections.CollectionCreatedEventArgs.Collection">
            <summary>
            Gets or sets the collection.
            </summary>
            <value>The collection.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Collections.CollectionCreatedEventArgs.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Collections.CollectionModifiedEventArgs.Collection">
            <summary>
            Gets or sets the collection.
            </summary>
            <value>The collection.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Collections.CollectionModifiedEventArgs.ItemsChanged">
            <summary>
            Gets or sets the items changed.
            </summary>
            <value>The items changed.</value>
        </member>
        <member name="E:MediaBrowser.Controller.Collections.ICollectionManager.CollectionCreated">
            <summary>
            Occurs when [collection created].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Collections.ICollectionManager.ItemsAddedToCollection">
            <summary>
            Occurs when [items added to collection].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Collections.ICollectionManager.ItemsRemovedFromCollection">
            <summary>
            Occurs when [items removed from collection].
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Collections.ICollectionManager.CreateCollectionAsync(MediaBrowser.Controller.Collections.CollectionCreationOptions)">
            <summary>
            Creates the collection.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Collections.ICollectionManager.AddToCollectionAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Adds to collection.
            </summary>
            <param name="collectionId">The collection identifier.</param>
            <param name="itemIds">The item ids.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Collections.ICollectionManager.RemoveFromCollectionAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Removes from collection.
            </summary>
            <param name="collectionId">The collection identifier.</param>
            <param name="itemIds">The item ids.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Collections.ICollectionManager.CollapseItemsWithinBoxSets(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Entities.BaseItem},Jellyfin.Data.Entities.User)">
            <summary>
            Collapses the items within box sets.
            </summary>
            <param name="items">The items.</param>
            <param name="user">The user.</param>
            <returns>IEnumerable{BaseItem}.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager">
            <summary>
            Interface IServerConfigurationManager.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Configuration.IServerConfigurationManager.ApplicationPaths">
            <summary>
            Gets the application paths.
            </summary>
            <value>The application paths.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Configuration.IServerConfigurationManager.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Devices.IDeviceManager.SaveCapabilities(System.String,MediaBrowser.Model.Session.ClientCapabilities)">
            <summary>
            Saves the capabilities.
            </summary>
            <param name="reportedId">The reported identifier.</param>
            <param name="capabilities">The capabilities.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Devices.IDeviceManager.GetCapabilities(System.String)">
            <summary>
            Gets the capabilities.
            </summary>
            <param name="reportedId">The reported identifier.</param>
            <returns>ClientCapabilities.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Devices.IDeviceManager.GetDevice(System.String)">
            <summary>
            Gets the device information.
            </summary>
            <param name="id">The identifier.</param>
            <returns>DeviceInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Devices.IDeviceManager.GetDevices(MediaBrowser.Model.Devices.DeviceQuery)">
            <summary>
            Gets the devices.
            </summary>
            <param name="query">The query.</param>
            <returns>IEnumerable&lt;DeviceInfo&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Devices.IDeviceManager.CanAccessDevice(Jellyfin.Data.Entities.User,System.String)">
            <summary>
            Determines whether this instance [can access device] the specified user identifier.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Dlna.IDlnaManager.GetProfileInfos">
            <summary>
            Gets the profile infos.
            </summary>
            <returns>IEnumerable{DeviceProfileInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Dlna.IDlnaManager.GetProfile(Microsoft.AspNetCore.Http.IHeaderDictionary)">
            <summary>
            Gets the profile.
            </summary>
            <param name="headers">The headers.</param>
            <returns>DeviceProfile.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Dlna.IDlnaManager.GetDefaultProfile">
            <summary>
            Gets the default profile.
            </summary>
            <returns>DeviceProfile.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Dlna.IDlnaManager.CreateProfile(MediaBrowser.Model.Dlna.DeviceProfile)">
            <summary>
            Creates the profile.
            </summary>
            <param name="profile">The profile.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Dlna.IDlnaManager.UpdateProfile(MediaBrowser.Model.Dlna.DeviceProfile)">
            <summary>
            Updates the profile.
            </summary>
            <param name="profile">The profile.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Dlna.IDlnaManager.DeleteProfile(System.String)">
            <summary>
            Deletes the profile.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Dlna.IDlnaManager.GetProfile(System.String)">
            <summary>
            Gets the profile.
            </summary>
            <param name="id">The identifier.</param>
            <returns>DeviceProfile.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Dlna.IDlnaManager.GetProfile(MediaBrowser.Model.Dlna.DeviceIdentification)">
            <summary>
            Gets the profile.
            </summary>
            <param name="deviceInfo">The device information.</param>
            <returns>DeviceProfile.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Dlna.IDlnaManager.GetServerDescriptionXml(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,System.String)">
            <summary>
            Gets the server description XML.
            </summary>
            <param name="headers">The headers.</param>
            <param name="serverUuId">The server uu identifier.</param>
            <param name="serverAddress">The server address.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Dlna.IDlnaManager.GetIcon(System.String)">
            <summary>
            Gets the icon.
            </summary>
            <param name="filename">The filename.</param>
            <returns>DlnaIconResponse.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.IImageEncoder.SupportedInputFormats">
            <summary>
            Gets the supported input formats.
            </summary>
            <value>The supported input formats.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.IImageEncoder.SupportedOutputFormats">
            <summary>
            Gets the supported output formats.
            </summary>
            <value>The supported output formats.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.IImageEncoder.Name">
            <summary>
            Gets the display name for the encoder.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.IImageEncoder.SupportsImageCollageCreation">
            <summary>
            Gets a value indicating whether [supports image collage creation].
            </summary>
            <value><c>true</c> if [supports image collage creation]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.IImageEncoder.SupportsImageEncoding">
            <summary>
            Gets a value indicating whether [supports image encoding].
            </summary>
            <value><c>true</c> if [supports image encoding]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageEncoder.GetImageSize(System.String)">
            <summary>
            Get the dimensions of an image from the filesystem.
            </summary>
            <param name="path">The filepath of the image.</param>
            <returns>The image dimensions.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageEncoder.GetImageBlurHash(System.Int32,System.Int32,System.String)">
            <summary>
            Gets the blurhash of an image.
            </summary>
            <param name="xComp">Amount of X components of DCT to take.</param>
            <param name="yComp">Amount of Y components of DCT to take.</param>
            <param name="path">The filepath of the image.</param>
            <returns>The blurhash.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageEncoder.EncodeImage(System.String,System.DateTime,System.String,System.Boolean,System.Nullable{MediaBrowser.Model.Drawing.ImageOrientation},System.Int32,MediaBrowser.Controller.Drawing.ImageProcessingOptions,MediaBrowser.Model.Drawing.ImageFormat)">
            <summary>
            Encode an image.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageEncoder.CreateImageCollage(MediaBrowser.Controller.Drawing.ImageCollageOptions,System.String)">
            <summary>
            Create an image collage.
            </summary>
            <param name="options">The options to use when creating the collage.</param>
            <param name="libraryName">Optional. </param>
        </member>
        <member name="T:MediaBrowser.Controller.Drawing.IImageProcessor">
            <summary>
            Interface IImageProcessor.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.IImageProcessor.SupportedInputFormats">
            <summary>
            Gets the supported input formats.
            </summary>
            <value>The supported input formats.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.IImageProcessor.SupportsImageCollageCreation">
            <summary>
            Gets a value indicating whether [supports image collage creation].
            </summary>
            <value><c>true</c> if [supports image collage creation]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.GetImageDimensions(System.String)">
            <summary>
            Gets the dimensions of the image.
            </summary>
            <param name="path">Path to the image file.</param>
            <returns>ImageDimensions.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.GetImageDimensions(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.ItemImageInfo)">
            <summary>
            Gets the dimensions of the image.
            </summary>
            <param name="item">The base item.</param>
            <param name="info">The information.</param>
            <returns>ImageDimensions.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.GetImageBlurHash(System.String)">
            <summary>
            Gets the blurhash of the image.
            </summary>
            <param name="path">Path to the image file.</param>
            <returns>BlurHash.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.GetImageCacheTag(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.ItemImageInfo)">
            <summary>
            Gets the image cache tag.
            </summary>
            <param name="item">The item.</param>
            <param name="image">The image.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.ProcessImage(MediaBrowser.Controller.Drawing.ImageProcessingOptions,System.IO.Stream)">
            <summary>
            Processes the image.
            </summary>
            <param name="options">The options.</param>
            <param name="toStream">To stream.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.ProcessImage(MediaBrowser.Controller.Drawing.ImageProcessingOptions)">
            <summary>
            Processes the image.
            </summary>
            <param name="options">The options.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.GetSupportedImageOutputFormats">
            <summary>
            Gets the supported image output formats.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IReadOnlyCollection`1" />.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.CreateImageCollage(MediaBrowser.Controller.Drawing.ImageCollageOptions,System.String)">
            <summary>
            Creates the image collage.
            </summary>
            <param name="options">The options.</param>
            <param name="libraryName">The library name to draw onto the collage.</param>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.ImageCollageOptions.InputPaths">
            <summary>
            Gets or sets the input paths.
            </summary>
            <value>The input paths.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.ImageCollageOptions.OutputPath">
            <summary>
            Gets or sets the output path.
            </summary>
            <value>The output path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.ImageCollageOptions.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.ImageCollageOptions.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.ImageStream.Stream">
            <summary>
            Gets or sets the stream.
            </summary>
            <value>The stream.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.ImageStream.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Dto.IDtoService">
            <summary>
            Interface IDtoService.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Dto.IDtoService.GetPrimaryImageAspectRatio(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the primary image aspect ratio.
            </summary>
            <param name="item">The item.</param>
            <returns>System.Nullable&lt;System.Double&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Dto.IDtoService.GetBaseItemDto(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Dto.DtoOptions,Jellyfin.Data.Entities.User,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the base item dto.
            </summary>
            <param name="item">The item.</param>
            <param name="options">The options.</param>
            <param name="user">The user.</param>
            <param name="owner">The owner.</param>
            <returns>BaseItemDto.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Dto.IDtoService.GetBaseItemDtos(System.Collections.Generic.IReadOnlyList{MediaBrowser.Controller.Entities.BaseItem},MediaBrowser.Controller.Dto.DtoOptions,Jellyfin.Data.Entities.User,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the base item dtos.
            </summary>
            <param name="items">The items.</param>
            <param name="options">The options.</param>
            <param name="user">The user.</param>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Dto.IDtoService.GetItemByNameDto(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Dto.DtoOptions,System.Collections.Generic.List{MediaBrowser.Controller.Entities.BaseItem},Jellyfin.Data.Entities.User)">
            <summary>
            Gets the item by name dto.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.AggregateFolder">
            <summary>
            Specialized folder that can have items added to it's children by external entities.
            Used for our RootFolder so plug-ins can add items.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Entities.AggregateFolder._virtualChildren">
            <summary>
            The _virtual children.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.AggregateFolder.VirtualChildren">
            <summary>
            Gets the virtual children.
            </summary>
            <value>The virtual children.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.AggregateFolder.AddVirtualChild(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Adds the virtual child.
            </summary>
            <param name="child">The child.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.AggregateFolder.FindVirtualChild(System.Guid)">
            <summary>
            Finds the virtual child.
            </summary>
            <param name="id">The id.</param>
            <returns>BaseItem.</returns>
            <exception cref="T:System.ArgumentNullException">id</exception>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Audio.Audio">
            <summary>
            Class Audio.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.Audio.Artists">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.Audio.AlbumArtists">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.Audio.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
            <value>The type of the media.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Audio.Audio.CreateSortName">
            <summary>
            Creates the name of the sort.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.IHasArtist.Artists">
            <summary>
            Gets or sets the artists.
            </summary>
            <value>The artists.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Audio.MusicAlbum">
            <summary>
            Class MusicAlbum.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.MusicAlbum.AlbumArtists">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.MusicAlbum.Artists">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.MusicAlbum.Tracks">
            <summary>
            Gets the tracks.
            </summary>
            <value>The tracks.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Audio.MusicArtist">
            <summary>
            Class MusicArtist.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.MusicArtist.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself.
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Audio.MusicArtist.GetUserDataKeys(MediaBrowser.Controller.Entities.Audio.MusicArtist)">
            <summary>
            Gets the user data key.
            </summary>
            <param name="item">The item.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Audio.MusicArtist.BeforeMetadataRefresh(System.Boolean)">
            <summary>
            This is called before any metadata refresh and returns true or false indicating if changes were made.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Audio.MusicGenre">
            <summary>
            Class MusicGenre.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.MusicGenre.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself.
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Audio.MusicGenre.BeforeMetadataRefresh(System.Boolean)">
            <summary>
            This is called before any metadata refresh and returns true or false indicating if changes were made.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.BaseItem">
            <summary>
            Class BaseItem.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Entities.BaseItem.SupportedImageExtensions">
            <summary>
            The supported image extensions.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Entities.BaseItem.TrailerFolderName">
            <summary>
            The trailer folder name.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Album">
            <summary>
            Gets or sets the album.
            </summary>
            <value>The album.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.ChannelId">
            <summary>
            Gets or sets the channel identifier.
            </summary>
            <value>The channel identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.IsInMixedFolder">
            <summary>
            Gets a value indicating whether this instance is in mixed folder.
            </summary>
            <value><c>true</c> if this instance is in mixed folder; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Audio">
            <summary>
            Gets or sets the audio.
            </summary>
            <value>The audio.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.DisplayPreferencesId">
            <summary>
            Return the id that should be used to key display prefs for this item.
            Default is based on the type for everything except actual generic folders.
            </summary>
            <value>The display prefs id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.ExternalId">
            <summary>
            If this content came from an external service, the id of the content on that service.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.ExternalEtag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.LocationType">
            <summary>
            Gets or sets the type of the location.
            </summary>
            <value>The type of the location.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.PrimaryImagePath">
            <summary>
            This is just a helper for convenience.
            </summary>
            <value>The primary image path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
            <value>The date created.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.DateModified">
            <summary>
            Gets or sets the date modified.
            </summary>
            <value>The date modified.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.LockedFields">
            <summary>
            Gets or sets the locked fields.
            </summary>
            <value>The locked fields.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
            <value>The type of the media.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.ForcedSortName">
            <summary>
            Gets or sets the name of the forced sort.
            </summary>
            <value>The name of the forced sort.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.SortName">
            <summary>
            Gets the name of the sort.
            </summary>
            <value>The name of the sort.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.CreateSortName">
            <summary>
            Creates the name of the sort.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.FindParent``1">
            <summary>
            Finds a parent of a given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>``0.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.PremiereDate">
            <summary>
            When the item first debuted. For movies this could be premiere date, episodes would be first aired
            </summary>
            <value>The premiere date.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.EndDate">
            <summary>
            Gets or sets the end date.
            </summary>
            <value>The end date.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.OfficialRating">
            <summary>
            Gets or sets the official rating.
            </summary>
            <value>The official rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.CriticRating">
            <summary>
            Gets or sets the critic rating.
            </summary>
            <value>The critic rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.CustomRating">
            <summary>
            Gets or sets the custom rating.
            </summary>
            <value>The custom rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Overview">
            <summary>
            Gets or sets the overview.
            </summary>
            <value>The overview.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Studios">
            <summary>
            Gets or sets the studios.
            </summary>
            <value>The studios.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Genres">
            <summary>
            Gets or sets the genres.
            </summary>
            <value>The genres.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Tags">
            <summary>
            Gets or sets the tags.
            </summary>
            <value>The tags.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.HomePageUrl">
            <summary>
            Gets or sets the home page URL.
            </summary>
            <value>The home page URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.CommunityRating">
            <summary>
            Gets or sets the community rating.
            </summary>
            <value>The community rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.RunTimeTicks">
            <summary>
            Gets or sets the run time ticks.
            </summary>
            <value>The run time ticks.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.ProductionYear">
            <summary>
            Gets or sets the production year.
            </summary>
            <value>The production year.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.IndexNumber">
            <summary>
            If the item is part of a series, this is it's number in the series.
            This could be episode number, album track number, etc.
            </summary>
            <value>The index number.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.ParentIndexNumber">
            <summary>
            For an episode this could be the season number, or for a song this could be the disc number.
            </summary>
            <value>The parent index number.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetPlayAccess(Jellyfin.Data.Entities.User)">
            <summary>
            Gets the play access.
            </summary>
            <param name="user">The user.</param>
            <returns>PlayAccess.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.LoadThemeSongs(System.Collections.Generic.List{MediaBrowser.Model.IO.FileSystemMetadata},MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Loads the theme songs.
            </summary>
            <returns>List{Audio.Audio}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.LoadThemeVideos(System.Collections.Generic.IEnumerable{MediaBrowser.Model.IO.FileSystemMetadata},MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Loads the video backdrops.
            </summary>
            <returns>List{Video}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.RefreshMetadata(MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Overrides the base implementation to refresh metadata for local trailers.
            </summary>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if a provider reports we changed.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.RefreshedOwnedItems(MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Collections.Generic.List{MediaBrowser.Model.IO.FileSystemMetadata},System.Threading.CancellationToken)">
            <summary>
            Refreshes owned items such as trailers, theme videos, special features, etc.
            Returns true or false indicating if changes were found.
            </summary>
            <param name="options"></param>
            <param name="fileSystemChildren"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.RefreshThemeSongs(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Collections.Generic.List{MediaBrowser.Model.IO.FileSystemMetadata},System.Threading.CancellationToken)">
            <summary>
            Refreshes the theme songs.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.ProviderIds">
            <summary>
            Gets or sets the provider ids.
            </summary>
            <value>The provider ids.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetPreferredMetadataLanguage">
            <summary>
            Gets the preferred metadata language.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetPreferredMetadataCountryCode">
            <summary>
            Gets the preferred metadata language.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.IsParentalAllowed(Jellyfin.Data.Entities.User)">
            <summary>
            Determines if a given user has access to this item.
            </summary>
            <param name="user">The user.</param>
            <returns><c>true</c> if [is parental allowed] [the specified user]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetBlockUnratedValue(Jellyfin.Data.Entities.User)">
            <summary>
            Gets the block unrated value.
            </summary>
            <param name="user">The configuration.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.IsVisible(Jellyfin.Data.Entities.User)">
            <summary>
            Determines if this folder should be visible to a given user.
            Default is just parental allowed. Can be overridden for more functionality.
            </summary>
            <param name="user">The user.</param>
            <returns><c>true</c> if the specified user is visible; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.IsFolder">
            <summary>
            Gets a value indicating whether this instance is folder.
            </summary>
            <value><c>true</c> if this instance is folder; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetLinkedChild(MediaBrowser.Controller.Entities.LinkedChild)">
            <summary>
            Gets the linked child.
            </summary>
            <param name="info">The info.</param>
            <returns>BaseItem.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.AddStudio(System.String)">
            <summary>
            Adds a studio to the item.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.AddGenre(System.String)">
            <summary>
            Adds a genre to the item.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.MarkPlayed(Jellyfin.Data.Entities.User,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Marks the played.
            </summary>
            <param name="user">The user.</param>
            <param name="datePlayed">The date played.</param>
            <param name="resetPosition">if set to <c>true</c> [reset position].</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.MarkUnplayed(Jellyfin.Data.Entities.User)">
            <summary>
            Marks the unplayed.
            </summary>
            <param name="user">The user.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.ChangedExternally">
            <summary>
            Do whatever refreshing is necessary when the filesystem pertaining to this item has changed.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.HasImage(MediaBrowser.Model.Entities.ImageType,System.Int32)">
            <summary>
            Gets an image.
            </summary>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <returns><c>true</c> if the specified type has image; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">Backdrops should be accessed using Item.Backdrops</exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.DeleteImageAsync(MediaBrowser.Model.Entities.ImageType,System.Int32)">
            <summary>
            Deletes the image.
            </summary>
            <param name="type">The type.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.ValidateImages(MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Validates that images within the item are still on the filesystem.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetImagePath(MediaBrowser.Model.Entities.ImageType,System.Int32)">
            <summary>
            Gets the image path.
            </summary>
            <param name="imageType">Type of the image.</param>
            <param name="imageIndex">Index of the image.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.InvalidOperationException">
            </exception>
            <exception cref="T:System.ArgumentNullException">item</exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetImageInfo(MediaBrowser.Model.Entities.ImageType,System.Int32)">
            <summary>
            Gets the image information.
            </summary>
            <param name="imageType">Type of the image.</param>
            <param name="imageIndex">Index of the image.</param>
            <returns>ItemImageInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetImageIndex(MediaBrowser.Controller.Entities.ItemImageInfo)">
            <summary>
            Computes image index for given image or raises if no matching image found.
            </summary>
            <param name="image">Image to compute index for.</param>
            <exception cref="T:System.ArgumentException">Image index cannot be computed as no matching image found.
            </exception>
            <returns>Image index.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.AddImages(MediaBrowser.Model.Entities.ImageType,System.Collections.Generic.List{MediaBrowser.Model.IO.FileSystemMetadata})">
            <summary>
            Adds the images.
            </summary>
            <param name="imageType">Type of the image.</param>
            <param name="images">The images.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentException">Cannot call AddImages with chapter images</exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetDeletePaths">
            <summary>
            Gets the file system path to delete when the item is to be deleted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.BeforeMetadataRefresh(System.Boolean)">
            <summary>
            This is called before any metadata refresh and returns true if changes were made.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.UpdateRatingToItems(System.Collections.Generic.IList{MediaBrowser.Controller.Entities.BaseItem})">
            <summary>
            Updates the official rating based on content and returns true or false indicating if it changed.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.RemoteTrailers">
            <summary>
            Gets or sets the remote trailers.
            </summary>
            <value>The remote trailers.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetExtras">
            <summary>
            Get all extras associated with this item, sorted by <see cref="P:MediaBrowser.Controller.Entities.BaseItem.SortName"/>.
            </summary>
            <returns>An enumerable containing the items.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetExtras(System.Collections.Generic.IReadOnlyCollection{MediaBrowser.Model.Entities.ExtraType})">
            <summary>
            Get all extras with specific types that are associated with this item.
            </summary>
            <param name="extraTypes">The types of extras to retrieve.</param>
            <returns>An enumerable containing the extras.</returns>
        </member>
        <member name="F:MediaBrowser.Controller.Entities.BaseItem.DisplayExtraTypes">
            <summary>
            Extra types that should be counted and displayed as "Special Features" in the UI.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.Equals(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItemExtensions.GetImagePath(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType)">
            <summary>
            Gets the image path.
            </summary>
            <param name="item">The item.</param>
            <param name="imageType">Type of the image.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItemExtensions.SetImagePath(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,MediaBrowser.Model.IO.FileSystemMetadata)">
            <summary>
            Sets the image path.
            </summary>
            <param name="item">The item.</param>
            <param name="imageType">Type of the image.</param>
            <param name="file">The file.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItemExtensions.SetImagePath(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.String)">
            <summary>
            Sets the image path.
            </summary>
            <param name="item">The item.</param>
            <param name="imageType">Type of the image.</param>
            <param name="file">The file.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItemExtensions.DeepCopy``2(``0,``1)">
            <summary>
            Copies all properties on object. Skips properties that do not exist.
            </summary>
            <param name="source">The source object.</param>
            <param name="dest">The destination object.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItemExtensions.DeepCopy``2(``0)">
            <summary>
            Copies all properties on newly created object. Skips properties that do not exist.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.BasePluginFolder">
            <summary>
            Plugins derive from and export this class to create a folder that will appear in the root along
            with all the other actual physical folders in the system.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Book.CanDownload">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Book.GetBlockUnratedType">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.Entities.CollectionFolder">
            <summary>
            Specialized Folder class that points to a subset of the physical folders in the system.
            It is created from the user-specific folders within the system root.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.CollectionFolder.DisplayPreferencesId">
            <summary>
            Allow different display preferences for each collection folder.
            </summary>
            <value>The display prefs id.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.CollectionFolder.ValidateChildrenInternal(System.IProgress{System.Double},System.Threading.CancellationToken,System.Boolean,System.Boolean,MediaBrowser.Controller.Providers.MetadataRefreshOptions,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Compare our current children (presumably just read from the repo) with the current state of the file system and adjust for any changes
            ***Currently does not contain logic to maintain items that are unavailable in the file system***
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <param name="refreshChildMetadata">if set to <c>true</c> [refresh child metadata].</param>
            <param name="refreshOptions">The refresh options.</param>
            <param name="directoryService">The directory service.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.CollectionFolder.Children">
            <summary>
            Our children are actually just references to the ones in the physical root...
            </summary>
            <value>The actual children.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Extensions">
            <summary>
            Class Extensions.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Extensions.AddTrailerUrl(MediaBrowser.Controller.Entities.BaseItem,System.String)">
            <summary>
            Adds the trailer URL.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Folder">
            <summary>
            Class Folder.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Folder.IsRoot">
            <summary>
            Gets or sets a value indicating whether this instance is root.
            </summary>
            <value><c>true</c> if this instance is root; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Folder.IsFolder">
            <summary>
            Gets a value indicating whether this instance is folder.
            </summary>
            <value><c>true</c> if this instance is folder; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.AddChild(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <summary>
            Adds the child.
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
            <exception cref="T:System.InvalidOperationException">Unable to add  + item.Name</exception>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Folder.Children">
            <summary>
            Gets the actual children.
            </summary>
            <value>The actual children.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Folder.RecursiveChildren">
            <summary>
            thread-safe access to all recursive children of this folder - without regard to user.
            </summary>
            <value>The recursive children.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.LoadChildren">
            <summary>
            Loads our children.  Validation will occur externally.
            We want this synchronous.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.ValidateChildren(System.IProgress{System.Double},System.Threading.CancellationToken,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Boolean)">
            <summary>
            Validates that the children of the folder still exist.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="metadataRefreshOptions">The metadata refresh options.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.ValidateChildrenInternal(System.IProgress{System.Double},System.Threading.CancellationToken,System.Boolean,System.Boolean,MediaBrowser.Controller.Providers.MetadataRefreshOptions,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Validates the children internal.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <param name="refreshChildMetadata">if set to <c>true</c> [refresh child metadata].</param>
            <param name="refreshOptions">The refresh options.</param>
            <param name="directoryService">The directory service.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.ValidateSubFolders(System.Collections.Generic.IList{MediaBrowser.Controller.Entities.Folder},MediaBrowser.Controller.Providers.IDirectoryService,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Refreshes the children.
            </summary>
            <param name="children">The children.</param>
            <param name="directoryService">The directory service.</param>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.RunTasks``1(System.Func{``0,System.IProgress{System.Double},System.Threading.Tasks.Task},System.Collections.Generic.IList{``0},System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Runs an action block on a list of children.
            </summary>
            <param name="task">The task to run for each child.</param>
            <param name="children">The list of children.</param>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.GetNonCachedChildren(MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Get the children of this folder from the actual file system.
            </summary>
            <returns>IEnumerable{BaseItem}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.GetCachedChildren">
            <summary>
            Get our children from the repo - stubbed for now.
            </summary>
            <returns>IEnumerable{BaseItem}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.AddChildren(Jellyfin.Data.Entities.User,System.Boolean,System.Collections.Generic.Dictionary{System.Guid,MediaBrowser.Controller.Entities.BaseItem},System.Boolean,MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Adds the children to list.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.GetRecursiveChildren(Jellyfin.Data.Entities.User,System.Boolean)">
            <summary>
            Gets allowed recursive children of an item.
            </summary>
            <param name="user">The user.</param>
            <param name="includeLinkedChildren">if set to <c>true</c> [include linked children].</param>
            <returns>IEnumerable{BaseItem}.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.GetRecursiveChildren">
            <summary>
            Gets the recursive children.
            </summary>
            <returns>IList{BaseItem}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.AddChildrenToList(System.Collections.Generic.Dictionary{System.Guid,MediaBrowser.Controller.Entities.BaseItem},System.Boolean,System.Boolean,System.Func{MediaBrowser.Controller.Entities.BaseItem,System.Boolean})">
            <summary>
            Adds the children to list.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.GetLinkedChildren">
            <summary>
            Gets the linked children.
            </summary>
            <returns>IEnumerable{BaseItem}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.GetLinkedChildrenInfos">
            <summary>
            Gets the linked children.
            </summary>
            <returns>IEnumerable{BaseItem}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.RefreshLinkedChildren(System.Collections.Generic.IEnumerable{MediaBrowser.Model.IO.FileSystemMetadata})">
            <summary>
            Refreshes the linked children.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.MarkPlayed(Jellyfin.Data.Entities.User,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Marks the played.
            </summary>
            <param name="user">The user.</param>
            <param name="datePlayed">The date played.</param>
            <param name="resetPosition">if set to <c>true</c> [reset position].</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.MarkUnplayed(Jellyfin.Data.Entities.User)">
            <summary>
            Marks the unplayed.
            </summary>
            <param name="user">The user.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Folder.ProgressHelpers">
            <summary>
            Contains constants used when reporting scan progress.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Entities.Folder.ProgressHelpers.RetrievedChildren">
            <summary>
            Reported after the folders immediate children are retrieved.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Entities.Folder.ProgressHelpers.UpdatedChildItems">
            <summary>
            Reported after add, updating, or deleting child items from the LibraryManager.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Entities.Folder.ProgressHelpers.ScannedSubfolders">
            <summary>
            Reported once subfolders are scanned.
            When scanning subfolders, the progress will be between [UpdatedItems, ScannedSubfolders].
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Entities.Folder.ProgressHelpers.RefreshedMetadata">
            <summary>
            Reported once metadata is refreshed.
            When refreshing metadata, the progress will be between [ScannedSubfolders, MetadataRefreshed].
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.ProgressHelpers.GetProgress(System.Int32,System.Int32,System.Double)">
            <summary>
            Gets the current progress given the previous step, next step, and progress in between.
            </summary>
            <param name="previousProgressStep">The previous progress step.</param>
            <param name="nextProgressStep">The next progress step.</param>
            <param name="currentProgress">The current progress step.</param>
            <returns>The progress.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Genre">
            <summary>
            Class Genre.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Genre.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself.
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Genre.BeforeMetadataRefresh(System.Boolean)">
            <summary>
            This is called before any metadata refresh and returns true or false indicating if changes were made.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.ICollectionFolder">
            <summary>
            This is just a marker interface to denote top level folders.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.IHasAspectRatio">
            <summary>
            Interface IHasAspectRatio.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.IHasAspectRatio.AspectRatio">
            <summary>
            Gets or sets the aspect ratio.
            </summary>
            <value>The aspect ratio.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.IHasDisplayOrder">
            <summary>
            Interface IHasDisplayOrder.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.IHasDisplayOrder.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
            <value>The display order.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.IHasMediaSources.GetMediaSources(System.Boolean)">
            <summary>
            Gets the media sources.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.IHasScreenshots">
            <summary>
            Interface IHasScreenshots.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.IHasSeries.SeriesName">
            <summary>
            Gets the name of the series.
            </summary>
            <value>The name of the series.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.IHasSpecialFeatures.SpecialFeatureIds">
            <summary>
            Gets or sets the special feature ids.
            </summary>
            <value>The special feature ids.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.IHasTrailers.RemoteTrailers">
            <summary>
            Gets or sets the remote trailers.
            </summary>
            <value>The remote trailers.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.IHasTrailers.LocalTrailerIds">
            <summary>
            Gets or sets the local trailer ids.
            </summary>
            <value>The local trailer ids.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.IHasTrailers.RemoteTrailerIds">
            <summary>
            Gets or sets the remote trailer ids.
            </summary>
            <value>The remote trailer ids.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.HasTrailerExtensions">
            <summary>
            Class providing extension methods for working with <see cref="T:MediaBrowser.Controller.Entities.IHasTrailers" />.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.HasTrailerExtensions.GetTrailerCount(MediaBrowser.Controller.Entities.IHasTrailers)">
            <summary>
            Gets the trailer count.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IReadOnlyList`1" />.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.HasTrailerExtensions.GetTrailerIds(MediaBrowser.Controller.Entities.IHasTrailers)">
            <summary>
            Gets the trailer ids.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IReadOnlyList`1" />.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.HasTrailerExtensions.GetTrailers(MediaBrowser.Controller.Entities.IHasTrailers)">
            <summary>
            Gets the trailers.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IReadOnlyList`1" />.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.IItemByName">
            <summary>
            Marker interface.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.IMetadataContainer.RefreshAllMetadata(MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Refreshes all metadata.
            </summary>
            <param name="refreshOptions">The refresh options.</param>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.InternalPeopleQuery.Limit">
            <summary>
            Gets or sets the maximum number of items the query should return.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.ISupportsBoxSetGrouping">
            <summary>
            Marker interface to denote a class that supports being hidden underneath it's boxset.
            Just about anything can be placed into a boxset,
            but movies should also only appear underneath and not outside separately (subject to configuration).
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.ISupportsPlaceHolders.IsPlaceHolder">
            <summary>
            Gets a value indicating whether this instance is place holder.
            </summary>
            <value><c>true</c> if this instance is place holder; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.ItemImageInfo.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.ItemImageInfo.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.ItemImageInfo.DateModified">
            <summary>
            Gets or sets the date modified.
            </summary>
            <value>The date modified.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.ItemImageInfo.BlurHash">
            <summary>
            Gets or sets the blurhash.
            </summary>
            <value>The blurhash.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.LinkedChild.ItemId">
            <summary>
            Serves as a cache.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Movies.BoxSet">
            <summary>
            Class BoxSet.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Movies.BoxSet.LocalTrailerIds">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Movies.BoxSet.RemoteTrailerIds">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Movies.BoxSet.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
            <value>The display order.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Movies.Movie">
            <summary>
            Class Movie.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Movies.Movie.SpecialFeatureIds">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Movies.Movie.LocalTrailerIds">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Movies.Movie.RemoteTrailerIds">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Movies.Movie.TmdbCollectionName">
            <summary>
            Gets or sets the name of the TMDB collection.
            </summary>
            <value>The name of the TMDB collection.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Movies.Movie.GetBlockUnratedType">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Movies.Movie.BeforeMetadataRefresh(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Movies.Movie.GetRelatedUrls">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.MusicVideo.Artists">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Person">
            <summary>
            This is the full Person object that can be retrieved with all of it's data.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Person.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself.
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Person.BeforeMetadataRefresh(System.Boolean)">
            <summary>
            This is called before any metadata refresh and returns true or false indicating if changes were made.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.PersonInfo">
            <summary>
            This is a small Person stub that is attached to BaseItems.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.PersonInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.PersonInfo.Role">
            <summary>
            Gets or sets the role.
            </summary>
            <value>The role.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.PersonInfo.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.PersonInfo.SortOrder">
            <summary>
            Gets or sets the ascending sort order.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.PersonInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Studio">
            <summary>
            Class Studio.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Studio.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself.
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Studio.BeforeMetadataRefresh(System.Boolean)">
            <summary>
            This is called before any metadata refresh and returns true or false indicating if changes were made.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Trailer">
            <summary>
            Class Trailer.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.TV.Episode">
            <summary>
            Class Episode.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Episode.LocalTrailerIds">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Episode.RemoteTrailerIds">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Episode.AirsBeforeSeasonNumber">
            <summary>
            Gets the season in which it aired.
            </summary>
            <value>The aired season.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Episode.IndexNumberEnd">
            <summary>
            This is the ending episode number for double episodes.
            </summary>
            <value>The index number.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Episode.Series">
            <summary>
            This Episode's Series Instance.
            </summary>
            <value>The series.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.TV.Episode.CreateSortName">
            <summary>
            Creates the name of the sort.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.TV.Episode.ContainsEpisodeNumber(System.Int32)">
            <summary>
            Determines whether [contains episode number] [the specified number].
            </summary>
            <param name="number">The number.</param>
            <returns><c>true</c> if [contains episode number] [the specified number]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.TV.Season">
            <summary>
            Class Season.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Season.Series">
            <summary>
            This Episode's Series Instance.
            </summary>
            <value>The series.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.TV.Season.CreateSortName">
            <summary>
            Creates the name of the sort.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.TV.Season.GetEpisodes(Jellyfin.Data.Entities.User,MediaBrowser.Controller.Dto.DtoOptions)">
            <summary>
            Gets the episodes.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.TV.Season.GetLookupInfo">
            <summary>
            Gets the lookup information.
            </summary>
            <returns>SeasonInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.TV.Season.BeforeMetadataRefresh(System.Boolean)">
            <summary>
            This is called before any metadata refresh and returns true or false indicating if changes were made.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.TV.Series">
            <summary>
            Class Series.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Series.LocalTrailerIds">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Series.RemoteTrailerIds">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Series.DisplayOrder">
            <summary>
            airdate, dvd or absolute.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Series.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.TV.Series.GetUserDataKeys">
            <summary>
            Gets the user data key.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.TV.Series.FilterEpisodesBySeason(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Entities.BaseItem},MediaBrowser.Controller.Entities.TV.Season,System.Boolean)">
            <summary>
            Filters the episodes by season.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.TV.Series.FilterEpisodesBySeason(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Entities.TV.Episode},System.Int32,System.Boolean)">
            <summary>
            Filters the episodes by season.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.UserItemData">
            <summary>
            Class UserItemData.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.UserId">
            <summary>
            Gets or sets the user id.
            </summary>
            <value>The user id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="F:MediaBrowser.Controller.Entities.UserItemData._rating">
            <summary>
            The _rating.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.Rating">
            <summary>
            Gets or sets the users 0-10 rating.
            </summary>
            <value>The rating.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Rating;A 0 to 10 rating is required for UserItemData.</exception>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.PlaybackPositionTicks">
            <summary>
            Gets or sets the playback position ticks.
            </summary>
            <value>The playback position ticks.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.PlayCount">
            <summary>
            Gets or sets the play count.
            </summary>
            <value>The play count.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.IsFavorite">
            <summary>
            Gets or sets a value indicating whether this instance is favorite.
            </summary>
            <value><c>true</c> if this instance is favorite; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.LastPlayedDate">
            <summary>
            Gets or sets the last played date.
            </summary>
            <value>The last played date.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.Played">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MediaBrowser.Controller.Entities.UserItemData" /> is played.
            </summary>
            <value><c>true</c> if played; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.AudioStreamIndex">
            <summary>
            Gets or sets the index of the audio stream.
            </summary>
            <value>The index of the audio stream.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.SubtitleStreamIndex">
            <summary>
            Gets or sets the index of the subtitle stream.
            </summary>
            <value>The index of the subtitle stream.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.Likes">
            <summary>
            This is an interpreted property to indicate likes or dislikes
            This should never be serialized.
            </summary>
            <value><c>null</c> if [likes] contains no value, <c>true</c> if [likes]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.UserRootFolder">
            <summary>
            Special class used for User Roots.  Children contain actual ones defined for this user
            PLUS the virtual folders from the physical root (added by plug-ins).
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserView.ViewType">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserView.DisplayParentId">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserView.UserId">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserView.CollectionType">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.Entities.UserView.GetIdsForAncestorQuery">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Video">
            <summary>
            Class Video.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Video.Timestamp">
            <summary>
            Gets or sets the timestamp.
            </summary>
            <value>The timestamp.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Video.SubtitleFiles">
            <summary>
            Gets or sets the subtitle paths.
            </summary>
            <value>The subtitle paths.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Video.HasSubtitles">
            <summary>
            Gets or sets a value indicating whether this instance has subtitles.
            </summary>
            <value><c>true</c> if this instance has subtitles; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Video.DefaultVideoStreamIndex">
            <summary>
            Gets or sets the default index of the video stream.
            </summary>
            <value>The default index of the video stream.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Video.VideoType">
            <summary>
            Gets or sets the type of the video.
            </summary>
            <value>The type of the video.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Video.IsoType">
            <summary>
            Gets or sets the type of the iso.
            </summary>
            <value>The type of the iso.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Video.Video3DFormat">
            <summary>
            Gets or sets the video3 D format.
            </summary>
            <value>The video3 D format.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Video.AspectRatio">
            <summary>
            Gets or sets the aspect ratio.
            </summary>
            <value>The aspect ratio.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Video.GetAdditionalParts">
            <summary>
            Gets the additional parts.
            </summary>
            <returns>IEnumerable{Video}.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Video.Is3D">
            <summary>
            Gets a value indicating whether [is3 D].
            </summary>
            <value><c>true</c> if [is3 D]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Video.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
            <value>The type of the media.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Video.UpdateToRepositoryAsync(MediaBrowser.Controller.Library.ItemUpdateType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Year">
            <summary>
            Class Year.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Year.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself.
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Year.BeforeMetadataRefresh(System.Boolean)">
            <summary>
            This is called before any metadata refresh and returns true or false indicating if changes were made.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Events.IEventConsumer`1">
            <summary>
            An interface representing a type that consumes events of type <c>T</c>.
            </summary>
            <typeparam name="T">The type of events this consumes.</typeparam>
        </member>
        <member name="M:MediaBrowser.Controller.Events.IEventConsumer`1.OnEvent(`0)">
            <summary>
            A method that is called when an event of type <c>T</c> is fired.
            </summary>
            <param name="eventArgs">The event.</param>
            <returns>A task representing the consumption of the event.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Events.IEventManager">
            <summary>
            An interface that handles eventing.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Events.IEventManager.Publish``1(``0)">
            <summary>
            Publishes an event.
            </summary>
            <param name="eventArgs">the event arguments.</param>
            <typeparam name="T">The type of event.</typeparam>
        </member>
        <member name="M:MediaBrowser.Controller.Events.IEventManager.PublishAsync``1(``0)">
            <summary>
            Publishes an event asynchronously.
            </summary>
            <param name="eventArgs">The event arguments.</param>
            <typeparam name="T">The type of event.</typeparam>
            <returns>A task representing the publishing of the event.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Events.Session.SessionEndedEventArgs">
            <summary>
            An event that fires when a session is ended.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Events.Session.SessionEndedEventArgs.#ctor(MediaBrowser.Controller.Session.SessionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Events.Session.SessionEndedEventArgs"/> class.
            </summary>
            <param name="arg">The session info.</param>
        </member>
        <member name="T:MediaBrowser.Controller.Events.Session.SessionStartedEventArgs">
            <summary>
            An event that fires when a session is started.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Events.Session.SessionStartedEventArgs.#ctor(MediaBrowser.Controller.Session.SessionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Events.Session.SessionStartedEventArgs"/> class.
            </summary>
            <param name="arg">The session info.</param>
        </member>
        <member name="T:MediaBrowser.Controller.Events.Updates.PluginInstallationCancelledEventArgs">
            <summary>
            An event that occurs when a plugin installation is cancelled.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Events.Updates.PluginInstallationCancelledEventArgs.#ctor(MediaBrowser.Model.Updates.InstallationInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Events.Updates.PluginInstallationCancelledEventArgs"/> class.
            </summary>
            <param name="arg">The installation info.</param>
        </member>
        <member name="T:MediaBrowser.Controller.Events.Updates.PluginInstalledEventArgs">
            <summary>
            An event that occurs when a plugin is installed.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Events.Updates.PluginInstalledEventArgs.#ctor(MediaBrowser.Model.Updates.InstallationInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Events.Updates.PluginInstalledEventArgs"/> class.
            </summary>
            <param name="arg">The installation info.</param>
        </member>
        <member name="T:MediaBrowser.Controller.Events.Updates.PluginInstallingEventArgs">
            <summary>
            An event that occurs when a plugin is installing.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Events.Updates.PluginInstallingEventArgs.#ctor(MediaBrowser.Model.Updates.InstallationInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Events.Updates.PluginInstallingEventArgs"/> class.
            </summary>
            <param name="arg">The installation info.</param>
        </member>
        <member name="T:MediaBrowser.Controller.Events.Updates.PluginUninstalledEventArgs">
            <summary>
            An event that occurs when a plugin is uninstalled.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Events.Updates.PluginUninstalledEventArgs.#ctor(MediaBrowser.Model.Plugins.PluginInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Events.Updates.PluginUninstalledEventArgs"/> class.
            </summary>
            <param name="arg">The plugin.</param>
        </member>
        <member name="T:MediaBrowser.Controller.Events.Updates.PluginUpdatedEventArgs">
            <summary>
            An event that occurs when a plugin is updated.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Events.Updates.PluginUpdatedEventArgs.#ctor(MediaBrowser.Model.Updates.InstallationInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Events.Updates.PluginUpdatedEventArgs"/> class.
            </summary>
            <param name="arg">The installation info.</param>
        </member>
        <member name="T:MediaBrowser.Controller.Extensions.ConfigurationExtensions">
            <summary>
            Configuration extensions for <c>MediaBrowser.Controller</c>.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Extensions.ConfigurationExtensions.DefaultRedirectKey">
            <summary>
            The key for a setting that specifies the default redirect path
            to use for requests where the URL base prefix is invalid or missing..
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Extensions.ConfigurationExtensions.HostWebClientKey">
            <summary>
            The key for a setting that indicates whether the application should host web client content.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Extensions.ConfigurationExtensions.FfmpegProbeSizeKey">
            <summary>
            The key for the FFmpeg probe size option.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Extensions.ConfigurationExtensions.FfmpegAnalyzeDurationKey">
            <summary>
            The key for the FFmpeg analyze duration option.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Extensions.ConfigurationExtensions.FfmpegPathKey">
            <summary>
            The key for the FFmpeg path option.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Extensions.ConfigurationExtensions.PlaylistsAllowDuplicatesKey">
            <summary>
            The key for a setting that indicates whether playlists should allow duplicate entries.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Extensions.ConfigurationExtensions.BindToUnixSocketKey">
            <summary>
            The key for a setting that indicates whether kestrel should bind to a unix socket.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Extensions.ConfigurationExtensions.UnixSocketPathKey">
            <summary>
            The key for the unix socket path.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Extensions.ConfigurationExtensions.HostWebClient(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Gets a value indicating whether the application should host static web content from the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/>.
            </summary>
            <param name="configuration">The configuration to retrieve the value from.</param>
            <returns>The parsed config value.</returns>
            <exception cref="T:System.FormatException">The config value is not a valid bool string. See <see cref="M:System.Boolean.Parse(System.String)"/>.</exception>
        </member>
        <member name="M:MediaBrowser.Controller.Extensions.ConfigurationExtensions.GetFFmpegProbeSize(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Gets the FFmpeg probe size from the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" />.
            </summary>
            <param name="configuration">The configuration to read the setting from.</param>
            <returns>The FFmpeg probe size option.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Extensions.ConfigurationExtensions.GetFFmpegAnalyzeDuration(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Gets the FFmpeg analyze duration from the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" />.
            </summary>
            <param name="configuration">The configuration to read the setting from.</param>
            <returns>The FFmpeg analyze duration option.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Extensions.ConfigurationExtensions.DoPlaylistsAllowDuplicates(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Gets a value indicating whether playlists should allow duplicate entries from the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/>.
            </summary>
            <param name="configuration">The configuration to read the setting from.</param>
            <returns>True if playlists should allow duplicates, otherwise false.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Extensions.ConfigurationExtensions.UseUnixSocket(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Gets a value indicating whether kestrel should bind to a unix socket from the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" />.
            </summary>
            <param name="configuration">The configuration to read the setting from.</param>
            <returns><c>true</c> if kestrel should bind to a unix socket, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Extensions.ConfigurationExtensions.GetUnixSocketPath(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Gets the path for the unix socket from the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" />.
            </summary>
            <param name="configuration">The configuration to read the setting from.</param>
            <returns>The unix socket path.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Extensions.StringExtensions">
            <summary>
            Class BaseExtensions.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.IDisplayPreferencesManager">
            <summary>
            Manages the storage and retrieval of display preferences.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.IDisplayPreferencesManager.GetDisplayPreferences(System.Guid,System.Guid,System.String)">
            <summary>
            Gets the display preferences for the user and client.
            </summary>
            <remarks>
            This will create the display preferences if it does not exist, but it will not save automatically.
            </remarks>
            <param name="userId">The user's id.</param>
            <param name="itemId">The item id.</param>
            <param name="client">The client string.</param>
            <returns>The associated display preferences.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.IDisplayPreferencesManager.GetItemDisplayPreferences(System.Guid,System.Guid,System.String)">
            <summary>
            Gets the default item display preferences for the user and client.
            </summary>
            <remarks>
            This will create the item display preferences if it does not exist, but it will not save automatically.
            </remarks>
            <param name="userId">The user id.</param>
            <param name="itemId">The item id.</param>
            <param name="client">The client string.</param>
            <returns>The item display preferences.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.IDisplayPreferencesManager.ListItemDisplayPreferences(System.Guid,System.String)">
            <summary>
            Gets all of the item display preferences for the user and client.
            </summary>
            <param name="userId">The user id.</param>
            <param name="client">The client string.</param>
            <returns>A list of item display preferences.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.IDisplayPreferencesManager.ListCustomItemDisplayPreferences(System.Guid,System.Guid,System.String)">
            <summary>
            Gets all of the custom item display preferences for the user and client.
            </summary>
            <param name="userId">The user id.</param>
            <param name="itemId">The item id.</param>
            <param name="client">The client string.</param>
            <returns>The dictionary of custom item display preferences.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.IDisplayPreferencesManager.SetCustomItemDisplayPreferences(System.Guid,System.Guid,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the custom item display preference for the user and client.
            </summary>
            <param name="userId">The user id.</param>
            <param name="itemId">The item id.</param>
            <param name="client">The client id.</param>
            <param name="customPreferences">A dictionary of custom item display preferences.</param>
        </member>
        <member name="M:MediaBrowser.Controller.IDisplayPreferencesManager.SaveChanges">
            <summary>
            Saves changes made to the database.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.IO.FileData">
            <summary>
            Provides low level File access that is much faster than the File/Directory api's.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.IO.FileData.GetFilteredFileSystemEntries(MediaBrowser.Controller.Providers.IDirectoryService,System.String,MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.IServerApplicationHost,Microsoft.Extensions.Logging.ILogger,MediaBrowser.Controller.Library.ItemResolveArgs,System.Int32,System.Boolean)">
            <summary>
            Gets the filtered file system entries.
            </summary>
            <param name="directoryService">The directory service.</param>
            <param name="path">The path.</param>
            <param name="fileSystem">The file system.</param>
            <param name="appHost">The application host.</param>
            <param name="logger">The logger.</param>
            <param name="args">The args.</param>
            <param name="flattenFolderDepth">The flatten folder depth.</param>
            <param name="resolveShortcuts">if set to <c>true</c> [resolve shortcuts].</param>
            <returns>Dictionary{System.StringFileSystemInfo}.</returns>
            <exception cref="T:System.ArgumentNullException">path</exception>
        </member>
        <member name="T:MediaBrowser.Controller.IServerApplicationHost">
            <summary>
            Interface IServerApplicationHost.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationHost.HttpPort">
            <summary>
            Gets the HTTP server port.
            </summary>
            <value>The HTTP server port.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationHost.HttpsPort">
            <summary>
            Gets the HTTPS port.
            </summary>
            <value>The HTTPS port.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationHost.ListenWithHttps">
            <summary>
            Gets a value indicating whether the server should listen on an HTTPS port.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationHost.HasUpdateAvailable">
            <summary>
            Gets a value indicating whether this instance has update available.
            </summary>
            <value><c>true</c> if this instance has update available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationHost.FriendlyName">
            <summary>
            Gets the name of the friendly.
            </summary>
            <value>The name of the friendly.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationHost.PublishedServerUrl">
            <summary>
            Gets the configured published server url.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.IServerApplicationHost.GetSystemInfo(System.Net.IPAddress)">
            <summary>
            Gets the system info.
            </summary>
            <param name="source">The originator of the request.</param>
            <returns>SystemInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.IServerApplicationHost.GetSmartApiUrl(Microsoft.AspNetCore.Http.HttpRequest,System.Nullable{System.Int32})">
            <summary>
            Gets a URL specific for the request.
            </summary>
            <param name="request">The <see cref="T:Microsoft.AspNetCore.Http.HttpRequest"/> instance.</param>
            <param name="port">Optional port number.</param>
            <returns>An accessible URL.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.IServerApplicationHost.GetSmartApiUrl(System.Net.IPAddress,System.Nullable{System.Int32})">
            <summary>
            Gets a URL specific for the request.
            </summary>
            <param name="remoteAddr">The remote <see cref="T:System.Net.IPAddress"/> of the connection.</param>
            <param name="port">Optional port number.</param>
            <returns>An accessible URL.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.IServerApplicationHost.GetSmartApiUrl(System.String,System.Nullable{System.Int32})">
            <summary>
            Gets a URL specific for the request.
            </summary>
            <param name="hostname">The hostname used in the connection.</param>
            <param name="port">Optional port number.</param>
            <returns>An accessible URL.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.IServerApplicationHost.GetLoopbackHttpApiUrl">
            <summary>
            Gets a localhost URL that can be used to access the API using the loop-back IP address.
            over HTTP (not HTTPS).
            </summary>
            <returns>The API URL.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.IServerApplicationHost.GetLocalApiUrl(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Gets a local (LAN) URL that can be used to access the API.
            Note: if passing non-null scheme or port it is up to the caller to ensure they form the correct pair.
            </summary>
            <param name="hostname">The hostname to use in the URL.</param>
            <param name="scheme">
            The scheme to use for the URL. If null, the scheme will be selected automatically,
            preferring HTTPS, if available.
            </param>
            <param name="port">
            The port to use for the URL. If null, the port will be selected automatically,
            preferring the HTTPS port, if available.
            </param>
            <returns>The API URL.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.IServerApplicationHost.LaunchUrl(System.String)">
            <summary>
            Open a URL in an external browser window.
            </summary>
            <param name="url">The URL to open.</param>
            <exception cref="T:System.NotSupportedException"><see cref="P:MediaBrowser.Controller.IServerApplicationHost.CanLaunchWebBrowser"/> is false.</exception>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.RootFolderPath">
            <summary>
            Gets the path to the base root media directory.
            </summary>
            <value>The root folder path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.DefaultUserViewsPath">
            <summary>
            Gets the path to the default user view directory.  Used if no specific user view is defined.
            </summary>
            <value>The default user views path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.PeoplePath">
            <summary>
            Gets the path to the People directory.
            </summary>
            <value>The people path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.GenrePath">
            <summary>
            Gets the path to the Genre directory.
            </summary>
            <value>The genre path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.MusicGenrePath">
            <summary>
            Gets the music genre path.
            </summary>
            <value>The music genre path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.StudioPath">
            <summary>
            Gets the path to the Studio directory.
            </summary>
            <value>The studio path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.YearPath">
            <summary>
            Gets the path to the Year directory.
            </summary>
            <value>The year path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.GeneralPath">
            <summary>
            Gets the path to the General IBN directory.
            </summary>
            <value>The general path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.RatingsPath">
            <summary>
            Gets the path to the Ratings IBN directory.
            </summary>
            <value>The ratings path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.MediaInfoImagesPath">
            <summary>
            Gets the media info images path.
            </summary>
            <value>The media info images path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.UserConfigurationDirectoryPath">
            <summary>
            Gets the path to the user configuration directory.
            </summary>
            <value>The user configuration directory path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.DefaultInternalMetadataPath">
            <summary>
            Gets the default internal metadata path.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.InternalMetadataPath">
            <summary>
            Gets the internal metadata path, either a custom path or the default.
            </summary>
            <value>The internal metadata path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.VirtualInternalMetadataPath">
            <summary>
            Gets the virtual internal metadata path, either a custom path or the default.
            </summary>
            <value>The virtual internal metadata path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.ArtistsPath">
            <summary>
            Gets the path to the artists directory.
            </summary>
            <value>The artists path.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Library.IIntroProvider">
            <summary>
            Class BaseIntroProvider.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IIntroProvider.GetIntros(MediaBrowser.Controller.Entities.BaseItem,Jellyfin.Data.Entities.User)">
            <summary>
            Gets the intros.
            </summary>
            <param name="item">The item.</param>
            <param name="user">The user.</param>
            <returns>IEnumerable{System.String}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IIntroProvider.GetAllIntroFiles">
            <summary>
            Gets all intro files.
            </summary>
            <returns>IEnumerable{System.String}.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Library.IIntroProvider.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Library.ILibraryManager">
            <summary>
            Interface ILibraryManager.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.ResolvePath(MediaBrowser.Model.IO.FileSystemMetadata,MediaBrowser.Controller.Entities.Folder)">
            <summary>
            Resolves the path.
            </summary>
            <param name="fileInfo">The file information.</param>
            <param name="parent">The parent.</param>
            <returns>BaseItem.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.ResolvePaths(System.Collections.Generic.IEnumerable{MediaBrowser.Model.IO.FileSystemMetadata},MediaBrowser.Controller.Providers.IDirectoryService,MediaBrowser.Controller.Entities.Folder,MediaBrowser.Model.Configuration.LibraryOptions,System.String)">
            <summary>
            Resolves a set of files into a list of BaseItem.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ILibraryManager.RootFolder">
            <summary>
            Gets the root folder.
            </summary>
            <value>The root folder.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetPerson(System.String)">
            <summary>
            Gets a Person.
            </summary>
            <param name="name">The name.</param>
            <returns>Task{Person}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.FindByPath(System.String,System.Nullable{System.Boolean})">
            <summary>
            Finds the by path.
            </summary>
            <param name="path">The path.</param>
            <param name="isFolder"><c>true</c> is the path is a directory; otherwise <c>false</c>.</param>
            <returns>BaseItem.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetArtist(System.String)">
            <summary>
            Gets the artist.
            </summary>
            <param name="name">The name.</param>
            <returns>Task{Artist}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetStudio(System.String)">
            <summary>
            Gets a Studio.
            </summary>
            <param name="name">The name.</param>
            <returns>Task{Studio}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetGenre(System.String)">
            <summary>
            Gets a Genre.
            </summary>
            <param name="name">The name.</param>
            <returns>Task{Genre}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetMusicGenre(System.String)">
            <summary>
            Gets the genre.
            </summary>
            <param name="name">The name.</param>
            <returns>Task{MusicGenre}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetYear(System.Int32)">
            <summary>
            Gets a Year.
            </summary>
            <param name="value">The value.</param>
            <returns>Task{Year}.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.ValidatePeople(System.Threading.CancellationToken,System.IProgress{System.Double})">
            <summary>
            Validate and refresh the People sub-set of the IBN.
            The items are stored in the db but not loaded into memory until actually requested by an operation.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="progress">The progress.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.ValidateMediaLibrary(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Reloads the root media folder.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.QueueLibraryScan">
            <summary>
            Queues the library scan.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetVirtualFolders">
            <summary>
            Gets the default view.
            </summary>
            <returns>IEnumerable{VirtualFolderInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetItemById(System.Guid)">
            <summary>
            Gets the item by id.
            </summary>
            <param name="id">The id.</param>
            <returns>BaseItem.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetIntros(MediaBrowser.Controller.Entities.BaseItem,Jellyfin.Data.Entities.User)">
            <summary>
            Gets the intros.
            </summary>
            <param name="item">The item.</param>
            <param name="user">The user.</param>
            <returns>IEnumerable{System.String}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetAllIntroFiles">
            <summary>
            Gets all intro files.
            </summary>
            <returns>IEnumerable{System.String}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Resolvers.IResolverIgnoreRule},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Resolvers.IItemResolver},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Library.IIntroProvider},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Sorting.IBaseItemComparer},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Library.ILibraryPostScanTask})">
            <summary>
            Adds the parts.
            </summary>
            <param name="rules">The rules.</param>
            <param name="resolvers">The resolvers.</param>
            <param name="introProviders">The intro providers.</param>
            <param name="itemComparers">The item comparers.</param>
            <param name="postscanTasks">The postscan tasks.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.Sort(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Entities.BaseItem},Jellyfin.Data.Entities.User,System.Collections.Generic.IEnumerable{System.String},Jellyfin.Data.Enums.SortOrder)">
            <summary>
            Sorts the specified items.
            </summary>
            <param name="items">The items.</param>
            <param name="user">The user.</param>
            <param name="sortBy">The sort by.</param>
            <param name="sortOrder">The sort order.</param>
            <returns>IEnumerable{BaseItem}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetUserRootFolder">
            <summary>
            Gets the user root folder.
            </summary>
            <returns>UserRootFolder.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.CreateItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Creates the item.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.CreateItems(System.Collections.Generic.IReadOnlyList{MediaBrowser.Controller.Entities.BaseItem},MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <summary>
            Creates the items.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.UpdateItemsAsync(System.Collections.Generic.IReadOnlyList{MediaBrowser.Controller.Entities.BaseItem},MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType,System.Threading.CancellationToken)">
            <summary>
            Updates the item.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.UpdateItemAsync(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType,System.Threading.CancellationToken)">
            <summary>
            Updates the item.
            </summary>
            <param name="item">The item.</param>
            <param name="parent">The parent item.</param>
            <param name="updateReason">The update reason.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.RetrieveItem(System.Guid)">
            <summary>
            Retrieves the item.
            </summary>
            <param name="id">The id.</param>
            <returns>BaseItem.</returns>
        </member>
        <member name="E:MediaBrowser.Controller.Library.ILibraryManager.ItemAdded">
            <summary>
            Occurs when [item added].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Library.ILibraryManager.ItemUpdated">
            <summary>
            Occurs when [item updated].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Library.ILibraryManager.ItemRemoved">
            <summary>
            Occurs when [item removed].
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetContentType(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Finds the type of the collection.
            </summary>
            <param name="item">The item.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetInheritedContentType(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the type of the inherited content.
            </summary>
            <param name="item">The item.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetConfiguredContentType(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the type of the configured content.
            </summary>
            <param name="item">The item.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetConfiguredContentType(System.String)">
            <summary>
            Gets the type of the configured content.
            </summary>
            <param name="path">The path.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.NormalizeRootPathList(System.Collections.Generic.IEnumerable{MediaBrowser.Model.IO.FileSystemMetadata})">
            <summary>
            Normalizes the root path list.
            </summary>
            <param name="paths">The paths.</param>
            <returns>IEnumerable{System.String}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.RegisterItem(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Registers the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.DeleteItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.DeleteOptions)">
            <summary>
            Deletes the item.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.DeleteItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.DeleteOptions,System.Boolean)">
            <summary>
            Deletes the item.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.DeleteItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.DeleteOptions,MediaBrowser.Controller.Entities.BaseItem,System.Boolean)">
            <summary>
            Deletes the item.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetNamedView(Jellyfin.Data.Entities.User,System.String,System.Guid,System.String,System.String)">
            <summary>
            Gets the named view.
            </summary>
            <param name="user">The user.</param>
            <param name="name">The name.</param>
            <param name="parentId">The parent identifier.</param>
            <param name="viewType">Type of the view.</param>
            <param name="sortName">Name of the sort.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetNamedView(Jellyfin.Data.Entities.User,System.String,System.String,System.String)">
            <summary>
            Gets the named view.
            </summary>
            <param name="user">The user.</param>
            <param name="name">The name.</param>
            <param name="viewType">Type of the view.</param>
            <param name="sortName">Name of the sort.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetNamedView(System.String,System.String,System.String)">
            <summary>
            Gets the named view.
            </summary>
            <param name="name">The name.</param>
            <param name="viewType">Type of the view.</param>
            <param name="sortName">Name of the sort.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetNamedView(System.String,System.Guid,System.String,System.String,System.String)">
            <summary>
            Gets the named view.
            </summary>
            <param name="name">The name.</param>
            <param name="parentId">The parent identifier.</param>
            <param name="viewType">Type of the view.</param>
            <param name="sortName">Name of the sort.</param>
            <param name="uniqueId">The unique identifier.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetShadowView(MediaBrowser.Controller.Entities.BaseItem,System.String,System.String)">
            <summary>
            Gets the shadow view.
            </summary>
            <param name="parent">The parent.</param>
            <param name="viewType">Type of the view.</param>
            <param name="sortName">Name of the sort.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.IsVideoFile(System.String)">
            <summary>
            Determines whether [is video file] [the specified path].
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if [is video file] [the specified path]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.IsAudioFile(System.String)">
            <summary>
            Determines whether [is audio file] [the specified path].
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if [is audio file] [the specified path]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetSeasonNumberFromPath(System.String)">
            <summary>
            Gets the season number from path.
            </summary>
            <param name="path">The path.</param>
            <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.FillMissingEpisodeNumbersFromPath(MediaBrowser.Controller.Entities.TV.Episode,System.Boolean)">
            <summary>
            Fills the missing episode numbers from path.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.ParseName(System.String)">
            <summary>
            Parses the name.
            </summary>
            <param name="name">The name.</param>
            <returns>ItemInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetNewItemId(System.String,System.Type)">
            <summary>
            Gets the new item identifier.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.FindTrailers(MediaBrowser.Controller.Entities.BaseItem,System.Collections.Generic.List{MediaBrowser.Model.IO.FileSystemMetadata},MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Finds the trailers.
            </summary>
            <param name="owner">The owner.</param>
            <param name="fileSystemChildren">The file system children.</param>
            <param name="directoryService">The directory service.</param>
            <returns>IEnumerable&lt;Trailer&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.FindExtras(MediaBrowser.Controller.Entities.BaseItem,System.Collections.Generic.List{MediaBrowser.Model.IO.FileSystemMetadata},MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Finds the extras.
            </summary>
            <param name="owner">The owner.</param>
            <param name="fileSystemChildren">The file system children.</param>
            <param name="directoryService">The directory service.</param>
            <returns>IEnumerable&lt;Video&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetCollectionFolders(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the collection folders.
            </summary>
            <param name="item">The item.</param>
            <returns>IEnumerable&lt;Folder&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetPeople(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the people.
            </summary>
            <param name="item">The item.</param>
            <returns>List&lt;PersonInfo&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetPeople(MediaBrowser.Controller.Entities.InternalPeopleQuery)">
            <summary>
            Gets the people.
            </summary>
            <param name="query">The query.</param>
            <returns>List&lt;PersonInfo&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetPeopleItems(MediaBrowser.Controller.Entities.InternalPeopleQuery)">
            <summary>
            Gets the people items.
            </summary>
            <param name="query">The query.</param>
            <returns>List&lt;Person&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.UpdatePeople(MediaBrowser.Controller.Entities.BaseItem,System.Collections.Generic.List{MediaBrowser.Controller.Entities.PersonInfo})">
            <summary>
            Updates the people.
            </summary>
            <param name="item">The item.</param>
            <param name="people">The people.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetItemIds(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the item ids.
            </summary>
            <param name="query">The query.</param>
            <returns>List&lt;Guid&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetPeopleNames(MediaBrowser.Controller.Entities.InternalPeopleQuery)">
            <summary>
            Gets the people names.
            </summary>
            <param name="query">The query.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.QueryItems(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Queries the items.
            </summary>
            <param name="query">The query.</param>
            <returns>QueryResult&lt;BaseItem&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.SubstitutePath(System.String,System.String,System.String)">
            <summary>
            Substitutes the path.
            </summary>
            <param name="path">The path.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.ConvertImageToLocal(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.ItemImageInfo,System.Int32)">
            <summary>
            Converts the image to local.
            </summary>
            <param name="item">The item.</param>
            <param name="image">The image.</param>
            <param name="imageIndex">Index of the image.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetItemList(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the items.
            </summary>
            <param name="query">The query.</param>
            <returns>QueryResult&lt;BaseItem&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetItemList(MediaBrowser.Controller.Entities.InternalItemsQuery,System.Collections.Generic.List{MediaBrowser.Controller.Entities.BaseItem})">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetItemsResult(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the items result.
            </summary>
            <param name="query">The query.</param>
            <returns>QueryResult&lt;BaseItem&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.IgnoreFile(MediaBrowser.Model.IO.FileSystemMetadata,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Ignores the file.
            </summary>
            <param name="file">The file.</param>
            <param name="parent">The parent.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryMonitor.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryMonitor.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryMonitor.ReportFileSystemChangeBeginning(System.String)">
            <summary>
            Reports the file system change beginning.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryMonitor.ReportFileSystemChangeComplete(System.String,System.Boolean)">
            <summary>
            Reports the file system change complete.
            </summary>
            <param name="path">The path.</param>
            <param name="refreshPath">if set to <c>true</c> [refresh path].</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryMonitor.ReportFileSystemChanged(System.String)">
            <summary>
            Reports the file system changed.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryMonitor.IsPathLocked(System.String)">
            <summary>
            Determines whether [is path locked] [the specified path].
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if [is path locked] [the specified path]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Library.ILibraryPostScanTask">
            <summary>
            An interface for tasks that run after the media library scan.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryPostScanTask.Run(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Runs the specified progress.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Library.IMediaSourceProvider})">
            <summary>
            Adds the parts.
            </summary>
            <param name="providers">The providers.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.GetMediaStreams(System.Guid)">
            <summary>
            Gets the media streams.
            </summary>
            <param name="itemId">The item identifier.</param>
            <returns>IEnumerable&lt;MediaStream&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.GetMediaStreams(System.String)">
            <summary>
            Gets the media streams.
            </summary>
            <param name="mediaSourceId">The media source identifier.</param>
            <returns>IEnumerable&lt;MediaStream&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.GetMediaStreams(MediaBrowser.Controller.Persistence.MediaStreamQuery)">
            <summary>
            Gets the media streams.
            </summary>
            <param name="query">The query.</param>
            <returns>IEnumerable&lt;MediaStream&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.GetMediaAttachments(System.Guid)">
            <summary>
            Gets the media attachments.
            </summary>
            <param name="itemId">The item identifier.</param>
            <returns>IEnumerable&lt;MediaAttachment&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.GetMediaAttachments(MediaBrowser.Controller.Persistence.MediaAttachmentQuery)">
            <summary>
            Gets the media attachments.
            </summary>
            <param name="query">The query.</param>
            <returns>IEnumerable&lt;MediaAttachment&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.GetPlaybackMediaSources(MediaBrowser.Controller.Entities.BaseItem,Jellyfin.Data.Entities.User,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the playack media sources.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.GetStaticMediaSources(MediaBrowser.Controller.Entities.BaseItem,System.Boolean,Jellyfin.Data.Entities.User)">
            <summary>
            Gets the static media sources.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.GetMediaSource(MediaBrowser.Controller.Entities.BaseItem,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the static media source.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.OpenLiveStream(MediaBrowser.Model.MediaInfo.LiveStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Opens the media source.
            </summary>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;MediaSourceInfo&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.GetLiveStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the live stream.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;MediaSourceInfo&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.CloseLiveStream(System.String)">
            <summary>
            Closes the media source.
            </summary>
            <param name="id">The live stream identifier.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceProvider.GetMediaSources(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <summary>
            Gets the media sources.
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;IEnumerable&lt;MediaSourceInfo&gt;&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceProvider.OpenMediaSource(System.String,System.Collections.Generic.List{MediaBrowser.Controller.Library.ILiveStream},System.Threading.CancellationToken)">
            <summary>
            Opens the media source.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMetadataFileSaver.GetSavePath(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the save path.
            </summary>
            <param name="item">The item.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Library.IMetadataSaver">
            <summary>
            Interface IMetadataSaver.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.IMetadataSaver.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMetadataSaver.IsEnabledFor(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType)">
            <summary>
            Determines whether [is enabled for] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <param name="updateType">Type of the update.</param>
            <returns><c>true</c> if [is enabled for] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMetadataSaver.Save(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <summary>
            Saves the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMusicManager.GetInstantMixFromItem(MediaBrowser.Controller.Entities.BaseItem,Jellyfin.Data.Entities.User,MediaBrowser.Controller.Dto.DtoOptions)">
            <summary>
            Gets the instant mix from song.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMusicManager.GetInstantMixFromArtist(MediaBrowser.Controller.Entities.Audio.MusicArtist,Jellyfin.Data.Entities.User,MediaBrowser.Controller.Dto.DtoOptions)">
            <summary>
            Gets the instant mix from artist.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMusicManager.GetInstantMixFromGenres(System.Collections.Generic.IEnumerable{System.String},Jellyfin.Data.Entities.User,MediaBrowser.Controller.Dto.DtoOptions)">
            <summary>
            Gets the instant mix from genre.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.IntroInfo.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.IntroInfo.ItemId">
            <summary>
            Gets or sets the item id.
            </summary>
            <value>The item id.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Library.ISearchEngine">
            <summary>
            Interface ILibrarySearchEngine.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ISearchEngine.GetSearchHints(MediaBrowser.Model.Search.SearchQuery)">
            <summary>
            Gets the search hints.
            </summary>
            <param name="query">The query.</param>
            <returns>Task{IEnumerable{SearchHintInfo}}.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Library.ItemChangeEventArgs">
            <summary>
            Class ItemChangeEventArgs.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemChangeEventArgs.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemChangeEventArgs.UpdateReason">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Library.ItemResolveArgs">
            <summary>
            These are arguments relating to the file system that are collected once and then referred to
            whenever needed.  Primarily for entity resolution.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Library.ItemResolveArgs._appPaths">
            <summary>
            The _app paths.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ItemResolveArgs.#ctor(MediaBrowser.Controller.IServerApplicationPaths,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Library.ItemResolveArgs" /> class.
            </summary>
            <param name="appPaths">The app paths.</param>
            <param name="directoryService">The directory service.</param>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemResolveArgs.FileSystemChildren">
            <summary>
            Gets the file system children.
            </summary>
            <value>The file system children.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemResolveArgs.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemResolveArgs.FileInfo">
            <summary>
            Gets or sets the file info.
            </summary>
            <value>The file info.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemResolveArgs.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemResolveArgs.IsDirectory">
            <summary>
            Gets a value indicating whether this instance is directory.
            </summary>
            <value><c>true</c> if this instance is directory; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemResolveArgs.IsVf">
            <summary>
            Gets a value indicating whether this instance is vf.
            </summary>
            <value><c>true</c> if this instance is vf; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemResolveArgs.IsPhysicalRoot">
            <summary>
            Gets a value indicating whether this instance is physical root.
            </summary>
            <value><c>true</c> if this instance is physical root; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemResolveArgs.AdditionalLocations">
            <summary>
            Gets or sets the additional locations.
            </summary>
            <value>The additional locations.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ItemResolveArgs.AddAdditionalLocation(System.String)">
            <summary>
            Adds the additional location.
            </summary>
            <param name="path">The path.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemResolveArgs.PhysicalLocations">
            <summary>
            Gets the physical locations.
            </summary>
            <value>The physical locations.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ItemResolveArgs.GetFileSystemEntryByName(System.String)">
            <summary>
            Gets the name of the file system entry by.
            </summary>
            <param name="name">The name.</param>
            <returns>FileSystemInfo.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ItemResolveArgs.GetFileSystemEntryByPath(System.String)">
            <summary>
            Gets the file system entry by path.
            </summary>
            <param name="path">The path.</param>
            <returns>FileSystemInfo.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ItemResolveArgs.ContainsFileSystemEntryByName(System.String)">
            <summary>
            Determines whether [contains file system entry by name] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if [contains file system entry by name] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ItemResolveArgs.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ItemResolveArgs.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ItemResolveArgs.Equals(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Equals the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Library.IUserDataManager">
            <summary>
            Interface IUserDataManager.
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Library.IUserDataManager.UserDataSaved">
            <summary>
            Occurs when [user data saved].
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserDataManager.SaveUserData(System.Guid,MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.UserItemData,MediaBrowser.Model.Entities.UserDataSaveReason,System.Threading.CancellationToken)">
            <summary>
            Saves the user data.
            </summary>
            <param name="userId">The user id.</param>
            <param name="item">The item.</param>
            <param name="userData">The user data.</param>
            <param name="reason">The reason.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserDataManager.GetUserDataDto(MediaBrowser.Controller.Entities.BaseItem,Jellyfin.Data.Entities.User)">
            <summary>
            Gets the user data dto.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserDataManager.GetAllUserData(System.Guid)">
            <summary>
            Get all user data for the given user.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserDataManager.SaveAllUserData(System.Guid,MediaBrowser.Controller.Entities.UserItemData[],System.Threading.CancellationToken)">
            <summary>
            Save the all provided user data for the given user.
            </summary>
            <param name="userId"></param>
            <param name="userData"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserDataManager.UpdatePlayState(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.UserItemData,System.Nullable{System.Int64})">
            <summary>
            Updates playstate for an item and returns true or false indicating if it was played to completion.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Library.IUserManager">
            <summary>
            Interface IUserManager.
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Library.IUserManager.OnUserUpdated">
            <summary>
            Occurs when a user is updated.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.IUserManager.Users">
            <summary>
            Gets the users.
            </summary>
            <value>The users.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.IUserManager.UsersIds">
            <summary>
            Gets the user ids.
            </summary>
            <value>The users ids.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.InitializeAsync">
            <summary>
            Initializes the user manager and ensures that a user exists.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.GetUserById(System.Guid)">
            <summary>
            Gets a user by Id.
            </summary>
            <param name="id">The id.</param>
            <returns>The user with the specified Id, or <c>null</c> if the user doesn't exist.</returns>
            <exception cref="T:System.ArgumentException"><c>id</c> is an empty Guid.</exception>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.GetUserByName(System.String)">
            <summary>
            Gets the name of the user by.
            </summary>
            <param name="name">The name.</param>
            <returns>User.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.RenameUser(Jellyfin.Data.Entities.User,System.String)">
            <summary>
            Renames the user.
            </summary>
            <param name="user">The user.</param>
            <param name="newName">The new name.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.UpdateUser(Jellyfin.Data.Entities.User)">
            <summary>
            Updates the user.
            </summary>
            <param name="user">The user.</param>
            <exception cref="T:System.ArgumentNullException">user</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.UpdateUserAsync(Jellyfin.Data.Entities.User)">
            <summary>
            Updates the user.
            </summary>
            <param name="user">The user.</param>
            <exception cref="T:System.ArgumentNullException">If user is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the provided user doesn't exist.</exception>
            <returns>A task representing the update of the user.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.CreateUserAsync(System.String)">
            <summary>
            Creates a user with the specified name.
            </summary>
            <param name="name">The name of the new user.</param>
            <returns>The created user.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.DeleteUser(System.Guid)">
            <summary>
            Deletes the specified user.
            </summary>
            <param name="userId">The id of the user to be deleted.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.ResetPassword(Jellyfin.Data.Entities.User)">
            <summary>
            Resets the password.
            </summary>
            <param name="user">The user.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.ResetEasyPassword(Jellyfin.Data.Entities.User)">
            <summary>
            Resets the easy password.
            </summary>
            <param name="user">The user.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.ChangePassword(Jellyfin.Data.Entities.User,System.String)">
            <summary>
            Changes the password.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.ChangeEasyPassword(Jellyfin.Data.Entities.User,System.String,System.String)">
            <summary>
            Changes the easy password.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.GetUserDto(Jellyfin.Data.Entities.User,System.String)">
            <summary>
            Gets the user dto.
            </summary>
            <param name="user">The user.</param>
            <param name="remoteEndPoint">The remote end point.</param>
            <returns>UserDto.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.AuthenticateUser(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Authenticates the user.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.StartForgotPasswordProcess(System.String,System.Boolean)">
            <summary>
            Starts the forgot password process.
            </summary>
            <param name="enteredUsername">The entered username.</param>
            <param name="isInNetwork">if set to <c>true</c> [is in network].</param>
            <returns>ForgotPasswordResult.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.RedeemPasswordResetPin(System.String)">
            <summary>
            Redeems the password reset pin.
            </summary>
            <param name="pin">The pin.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.UpdateConfigurationAsync(System.Guid,MediaBrowser.Model.Configuration.UserConfiguration)">
            <summary>
            This method updates the user's configuration.
            This is only included as a stopgap until the new API, using this internally is not recommended.
            Instead, modify the user object directly, then call <see cref="M:MediaBrowser.Controller.Library.IUserManager.UpdateUser(Jellyfin.Data.Entities.User)"/>.
            </summary>
            <param name="userId">The user's Id.</param>
            <param name="config">The request containing the new user configuration.</param>
            <returns>A task representing the update.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.UpdatePolicyAsync(System.Guid,MediaBrowser.Model.Users.UserPolicy)">
            <summary>
            This method updates the user's policy.
            This is only included as a stopgap until the new API, using this internally is not recommended.
            Instead, modify the user object directly, then call <see cref="M:MediaBrowser.Controller.Library.IUserManager.UpdateUser(Jellyfin.Data.Entities.User)"/>.
            </summary>
            <param name="userId">The user's Id.</param>
            <param name="policy">The request containing the new user policy.</param>
            <returns>A task representing the update.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.ClearProfileImageAsync(Jellyfin.Data.Entities.User)">
            <summary>
            Clears the user's profile image.
            </summary>
            <param name="user">The user.</param>
            <returns>A task representing the clearing of the profile image.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Library.PlaybackProgressEventArgs">
            <summary>
            Holds information about a playback progress event.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Library.PlaybackStartEventArgs">
            <summary>
            An event that occurs when playback is started.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.PlaybackStopEventArgs.PlayedToCompletion">
            <summary>
            Gets or sets a value indicating whether [played to completion].
            </summary>
            <value><c>true</c> if [played to completion]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Library.Profiler">
            <summary>
            Class Profiler.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Library.Profiler._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Library.Profiler._stopwatch">
            <summary>
            The stopwatch.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Library.Profiler._logger">
            <summary>
            The _logger.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.Profiler.#ctor(System.String,Microsoft.Extensions.Logging.ILogger{MediaBrowser.Controller.Library.Profiler})">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Library.Profiler" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.Profiler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.Profiler.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MediaBrowser.Controller.Library.SearchHintInfo">
            <summary>
            Class SearchHintInfo.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.SearchHintInfo.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.SearchHintInfo.MatchedTerm">
            <summary>
            Gets or sets the matched term.
            </summary>
            <value>The matched term.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Library.TVUtils">
            <summary>
            Class TVUtils.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.TVUtils.GetAirDays(System.String)">
            <summary>
            Gets the air days.
            </summary>
            <param name="day">The day.</param>
            <returns>List{DayOfWeek}.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Library.UserDataSaveEventArgs">
            <summary>
            Class UserDataSaveEventArgs.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.UserDataSaveEventArgs.UserId">
            <summary>
            Gets or sets the user id.
            </summary>
            <value>The user id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.UserDataSaveEventArgs.SaveReason">
            <summary>
            Gets or sets the save reason.
            </summary>
            <value>The save reason.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.UserDataSaveEventArgs.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>The user data.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.UserDataSaveEventArgs.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:MediaBrowser.Controller.LiveTv.ChannelInfo">
            <summary>
            Class ChannelInfo.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.Number">
            <summary>
            Gets or sets the number.
            </summary>
            <value>The number.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.Id">
            <summary>
            Get or sets the Id.
            </summary>
            <value>The id of the channel.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.TunerHostId">
            <summary>
            Gets or sets the tuner host identifier.
            </summary>
            <value>The tuner host identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.ChannelType">
            <summary>
            Gets or sets the type of the channel.
            </summary>
            <value>The type of the channel.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.ImagePath">
            <summary>
            Supply the image path if it can be accessed directly from the file system.
            </summary>
            <value>The image path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.ImageUrl">
            <summary>
            Supply the image url if it can be downloaded.
            </summary>
            <value>The image URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.HasImage">
            <summary>
            Gets or sets a value indicating whether this instance has image.
            </summary>
            <value><c>null</c> if [has image] contains no value, <c>true</c> if [has image]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.IsFavorite">
            <summary>
            Gets or sets a value indicating whether this instance is favorite.
            </summary>
            <value><c>null</c> if [is favorite] contains no value, <c>true</c> if [is favorite]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MediaBrowser.Controller.LiveTv.ILiveTvManager">
            <summary>
            Manages all live tv services installed on the server.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ILiveTvManager.Services">
            <summary>
            Gets the services.
            </summary>
            <value>The services.</value>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetNewTimerDefaults(System.Threading.CancellationToken)">
            <summary>
            Gets the new timer defaults asynchronous.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{TimerInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetNewTimerDefaults(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the new timer defaults.
            </summary>
            <param name="programId">The program identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{SeriesTimerInfoDto}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.CancelTimer(System.String)">
            <summary>
            Cancels the timer.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.CancelSeriesTimer(System.String)">
            <summary>
            Cancels the series timer.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.LiveTv.ILiveTvService},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.LiveTv.ITunerHost},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.LiveTv.IListingsProvider})">
            <summary>
            Adds the parts.
            </summary>
            <param name="services">The services.</param>
            <param name="tunerHosts">The tuner hosts.</param>
            <param name="listingProviders">The listing providers.</param>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetTimer(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the timer.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{TimerInfoDto}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetSeriesTimer(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the series timer.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{TimerInfoDto}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetRecordings(MediaBrowser.Model.LiveTv.RecordingQuery,MediaBrowser.Controller.Dto.DtoOptions)">
            <summary>
            Gets the recordings.
            </summary>
            <param name="query">The query.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetTimers(MediaBrowser.Model.LiveTv.TimerQuery,System.Threading.CancellationToken)">
            <summary>
            Gets the timers.
            </summary>
            <param name="query">The query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{QueryResult{TimerInfoDto}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetSeriesTimers(MediaBrowser.Model.LiveTv.SeriesTimerQuery,System.Threading.CancellationToken)">
            <summary>
            Gets the series timers.
            </summary>
            <param name="query">The query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{QueryResult{SeriesTimerInfoDto}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetChannelStream(System.String,System.String,System.Collections.Generic.List{MediaBrowser.Controller.Library.ILiveStream},System.Threading.CancellationToken)">
            <summary>
            Gets the channel stream.
            </summary>
            <param name="id">The identifier.</param>
            <param name="mediaSourceId">The media source identifier.</param>
            <param name="currentLiveStreams">The current live streams.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{StreamResponseInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetProgram(System.String,System.Threading.CancellationToken,Jellyfin.Data.Entities.User)">
            <summary>
            Gets the program.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="user">The user.</param>
            <returns>Task{ProgramInfoDto}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetPrograms(MediaBrowser.Controller.Entities.InternalItemsQuery,MediaBrowser.Controller.Dto.DtoOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the programs.
            </summary>
            <param name="query">The query.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>IEnumerable{ProgramInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.UpdateTimer(MediaBrowser.Model.LiveTv.TimerInfoDto,System.Threading.CancellationToken)">
            <summary>
            Updates the timer.
            </summary>
            <param name="timer">The timer.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.UpdateSeriesTimer(MediaBrowser.Model.LiveTv.SeriesTimerInfoDto,System.Threading.CancellationToken)">
            <summary>
            Updates the timer.
            </summary>
            <param name="timer">The timer.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.CreateTimer(MediaBrowser.Model.LiveTv.TimerInfoDto,System.Threading.CancellationToken)">
            <summary>
            Creates the timer.
            </summary>
            <param name="timer">The timer.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.CreateSeriesTimer(MediaBrowser.Model.LiveTv.SeriesTimerInfoDto,System.Threading.CancellationToken)">
            <summary>
            Creates the series timer.
            </summary>
            <param name="timer">The timer.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetGuideInfo">
            <summary>
            Gets the guide information.
            </summary>
            <returns>GuideInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetRecommendedPrograms(MediaBrowser.Controller.Entities.InternalItemsQuery,MediaBrowser.Controller.Dto.DtoOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the recommended programs.
            </summary>
            <param name="query">The query.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetRecommendedProgramsInternal(MediaBrowser.Controller.Entities.InternalItemsQuery,MediaBrowser.Controller.Dto.DtoOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the recommended programs internal.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetLiveTvInfo(System.Threading.CancellationToken)">
            <summary>
            Gets the live tv information.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{LiveTvInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.ResetTuner(System.String,System.Threading.CancellationToken)">
            <summary>
            Resets the tuner.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetInternalLiveTvFolder(System.Threading.CancellationToken)">
            <summary>
            Gets the live tv folder.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetEnabledUsers">
            <summary>
            Gets the enabled users.
            </summary>
            <returns>IEnumerable{User}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetInternalChannels(MediaBrowser.Model.LiveTv.LiveTvChannelQuery,MediaBrowser.Controller.Dto.DtoOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the internal channels.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetChannelMediaSources(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <summary>
            Gets the channel media sources.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.AddInfoToProgramDto(System.Collections.Generic.IReadOnlyCollection{System.ValueTuple{MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Dto.BaseItemDto}},System.Collections.Generic.IReadOnlyList{MediaBrowser.Model.Querying.ItemFields},Jellyfin.Data.Entities.User)">
            <summary>
            Adds the information to program dto.
            </summary>
            <param name="programs">The programs.</param>
            <param name="fields">The fields.</param>
            <param name="user">The user.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.SaveTunerHost(MediaBrowser.Model.LiveTv.TunerHostInfo,System.Boolean)">
            <summary>
            Saves the tuner host.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.SaveListingProvider(MediaBrowser.Model.LiveTv.ListingsProviderInfo,System.Boolean,System.Boolean)">
            <summary>
            Saves the listing provider.
            </summary>
            <param name="info">The information.</param>
            <param name="validateLogin">if set to <c>true</c> [validate login].</param>
            <param name="validateListings">if set to <c>true</c> [validate listings].</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetLineups(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the lineups.
            </summary>
            <param name="providerType">Type of the provider.</param>
            <param name="providerId">The provider identifier.</param>
            <param name="country">The country.</param>
            <param name="location">The location.</param>
            <returns>Task&lt;List&lt;NameIdPair&gt;&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.AddChannelInfo(System.Collections.Generic.IReadOnlyCollection{System.ValueTuple{MediaBrowser.Model.Dto.BaseItemDto,MediaBrowser.Controller.LiveTv.LiveTvChannel}},MediaBrowser.Controller.Dto.DtoOptions,Jellyfin.Data.Entities.User)">
            <summary>
            Adds the channel information.
            </summary>
            <param name="items">The items.</param>
            <param name="options">The options.</param>
            <param name="user">The user.</param>
        </member>
        <member name="T:MediaBrowser.Controller.LiveTv.ILiveTvService">
            <summary>
            Represents a single live tv back end (next pvr, media portal, etc).
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ILiveTvService.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ILiveTvService.HomePageUrl">
            <summary>
            Gets the home page URL.
            </summary>
            <value>The home page URL.</value>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.GetChannelsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the channels async.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IEnumerable{ChannelInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.CancelTimerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels the timer asynchronous.
            </summary>
            <param name="timerId">The timer identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.CancelSeriesTimerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels the series timer asynchronous.
            </summary>
            <param name="timerId">The timer identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.CreateTimerAsync(MediaBrowser.Controller.LiveTv.TimerInfo,System.Threading.CancellationToken)">
            <summary>
            Creates the timer asynchronous.
            </summary>
            <param name="info">The information.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.CreateSeriesTimerAsync(MediaBrowser.Controller.LiveTv.SeriesTimerInfo,System.Threading.CancellationToken)">
            <summary>
            Creates the series timer asynchronous.
            </summary>
            <param name="info">The information.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.UpdateTimerAsync(MediaBrowser.Controller.LiveTv.TimerInfo,System.Threading.CancellationToken)">
            <summary>
            Updates the timer asynchronous.
            </summary>
            <param name="info">The information.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.UpdateSeriesTimerAsync(MediaBrowser.Controller.LiveTv.SeriesTimerInfo,System.Threading.CancellationToken)">
            <summary>
            Updates the series timer asynchronous.
            </summary>
            <param name="info">The information.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.GetTimersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the recordings asynchronous.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IEnumerable{RecordingInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.GetNewTimerDefaultsAsync(System.Threading.CancellationToken,MediaBrowser.Controller.LiveTv.ProgramInfo)">
            <summary>
            Gets the new timer defaults asynchronous.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="program">The program.</param>
            <returns>Task{SeriesTimerInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.GetSeriesTimersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the series timers asynchronous.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IEnumerable{SeriesTimerInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.GetProgramsAsync(System.String,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets the programs asynchronous.
            </summary>
            <param name="channelId">The channel identifier.</param>
            <param name="startDateUtc">The start date UTC.</param>
            <param name="endDateUtc">The end date UTC.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IEnumerable{ProgramInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.GetChannelStream(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the channel stream.
            </summary>
            <param name="channelId">The channel identifier.</param>
            <param name="streamId">The stream identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{Stream}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.GetChannelStreamMediaSources(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the channel stream media sources.
            </summary>
            <param name="channelId">The channel identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;List&lt;MediaSourceInfo&gt;&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.CloseLiveStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Closes the live stream.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.RecordLiveStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Records the live stream.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvService.ResetTuner(System.String,System.Threading.CancellationToken)">
            <summary>
            Resets the tuner.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ISupportsNewTimerIds.CreateTimer(MediaBrowser.Controller.LiveTv.TimerInfo,System.Threading.CancellationToken)">
            <summary>
            Creates the timer asynchronous.
            </summary>
            <param name="info">The information.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ISupportsNewTimerIds.CreateSeriesTimer(MediaBrowser.Controller.LiveTv.SeriesTimerInfo,System.Threading.CancellationToken)">
            <summary>
            Creates the series timer asynchronous.
            </summary>
            <param name="info">The information.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ITunerHost.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ITunerHost.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ITunerHost.GetChannels(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the channels.
            </summary>
            <returns>Task&lt;IEnumerable&lt;ChannelInfo&gt;&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ITunerHost.GetTunerInfos(System.Threading.CancellationToken)">
            <summary>
            Gets the tuner infos.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;List&lt;LiveTvTunerInfo&gt;&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ITunerHost.GetChannelStream(System.String,System.String,System.Collections.Generic.List{MediaBrowser.Controller.Library.ILiveStream},System.Threading.CancellationToken)">
            <summary>
            Gets the channel stream.
            </summary>
            <param name="channelId">The channel identifier.</param>
            <param name="streamId">The stream identifier.</param>
            <param name="currentLiveStreams">The current live streams.</param>
            <param name="cancellationToken">The cancellation token to cancel operation.</param>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ITunerHost.GetChannelStreamMediaSources(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the channel stream media sources.
            </summary>
            <param name="channelId">The channel identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;List&lt;MediaSourceInfo&gt;&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.IConfigurableTunerHost.Validate(MediaBrowser.Model.LiveTv.TunerHostInfo)">
            <summary>
            Validates the specified information.
            </summary>
            <param name="info">The information.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvChannel.Number">
            <summary>
            Gets or sets the number.
            </summary>
            <value>The number.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvChannel.ChannelType">
            <summary>
            Gets or sets the type of the channel.
            </summary>
            <value>The type of the channel.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvChannel.IsSports">
            <summary>
            Gets or sets a value indicating whether this instance is sports.
            </summary>
            <value><c>true</c> if this instance is sports; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvChannel.IsSeries">
            <summary>
            Gets or sets a value indicating whether this instance is series.
            </summary>
            <value><c>true</c> if this instance is series; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvChannel.IsNews">
            <summary>
            Gets or sets a value indicating whether this instance is news.
            </summary>
            <value><c>true</c> if this instance is news; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvChannel.IsKids">
            <summary>
            Gets or sets a value indicating whether this instance is kids.
            </summary>
            <value><c>true</c> if this instance is kids; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvChannel.EpisodeTitle">
            <summary>
            Gets or sets the episode title.
            </summary>
            <value>The episode title.</value>
        </member>
        <member name="T:MediaBrowser.Controller.LiveTv.LiveTvConflictException">
            <summary>
            Class LiveTvConflictException.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.StartDate">
            <summary>
            The start date of the program, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsRepeat">
            <summary>
            Gets or sets a value indicating whether this instance is repeat.
            </summary>
            <value><c>true</c> if this instance is repeat; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.EpisodeTitle">
            <summary>
            Gets or sets the episode title.
            </summary>
            <value>The episode title.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsMovie">
            <summary>
            Gets or sets a value indicating whether this instance is movie.
            </summary>
            <value><c>true</c> if this instance is movie; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsSports">
            <summary>
            Gets or sets a value indicating whether this instance is sports.
            </summary>
            <value><c>true</c> if this instance is sports; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsSeries">
            <summary>
            Gets or sets a value indicating whether this instance is series.
            </summary>
            <value><c>true</c> if this instance is series; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsLive">
            <summary>
            Gets or sets a value indicating whether this instance is live.
            </summary>
            <value><c>true</c> if this instance is live; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsNews">
            <summary>
            Gets or sets a value indicating whether this instance is news.
            </summary>
            <value><c>true</c> if this instance is news; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsKids">
            <summary>
            Gets or sets a value indicating whether this instance is kids.
            </summary>
            <value><c>true</c> if this instance is kids; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsPremiere">
            <summary>
            Gets or sets a value indicating whether this instance is premiere.
            </summary>
            <value><c>true</c> if this instance is premiere; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself.
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvServiceStatusInfo.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvServiceStatusInfo.StatusMessage">
            <summary>
            Gets or sets the status message.
            </summary>
            <value>The status message.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvServiceStatusInfo.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvServiceStatusInfo.HasUpdateAvailable">
            <summary>
            Gets or sets a value indicating whether this instance has update available.
            </summary>
            <value><c>true</c> if this instance has update available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvServiceStatusInfo.Tuners">
            <summary>
            Gets or sets the tuners.
            </summary>
            <value>The tuners.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvServiceStatusInfo.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value><c>true</c> if this instance is visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.SourceType">
            <summary>
            Gets or sets the type of the source.
            </summary>
            <value>The type of the source.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.ChannelId">
            <summary>
            Gets or sets the channel identifier.
            </summary>
            <value>The channel identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.RecordingId">
            <summary>
            Gets or sets the recording identifier.
            </summary>
            <value>The recording identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.ProgramName">
            <summary>
            Gets or sets the name of the program.
            </summary>
            <value>The name of the program.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.Clients">
            <summary>
            Gets or sets the clients.
            </summary>
            <value>The clients.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.CanReset">
            <summary>
            Gets or sets a value indicating whether this instance can reset.
            </summary>
            <value><c>true</c> if this instance can reset; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.Id">
            <summary>
            Id of the program.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.ChannelId">
            <summary>
            Gets or sets the channel identifier.
            </summary>
            <value>The channel identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.Name">
            <summary>
            Name of the program.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.OfficialRating">
            <summary>
            Gets or sets the official rating.
            </summary>
            <value>The official rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.Overview">
            <summary>
            Gets or sets the overview.
            </summary>
            <value>The overview.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.ShortOverview">
            <summary>
            Gets or sets the short overview.
            </summary>
            <value>The short overview.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.StartDate">
            <summary>
            The start date of the program, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.EndDate">
            <summary>
            The end date of the program, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.Genres">
            <summary>
            Genre of the program.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.OriginalAirDate">
            <summary>
            Gets or sets the original air date.
            </summary>
            <value>The original air date.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsHD">
            <summary>
            Gets or sets a value indicating whether this instance is hd.
            </summary>
            <value><c>true</c> if this instance is hd; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.Audio">
            <summary>
            Gets or sets the audio.
            </summary>
            <value>The audio.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.CommunityRating">
            <summary>
            Gets or sets the community rating.
            </summary>
            <value>The community rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsRepeat">
            <summary>
            Gets or sets a value indicating whether this instance is repeat.
            </summary>
            <value><c>true</c> if this instance is repeat; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.EpisodeTitle">
            <summary>
            Gets or sets the episode title.
            </summary>
            <value>The episode title.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.ImagePath">
            <summary>
            Supply the image path if it can be accessed directly from the file system.
            </summary>
            <value>The image path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.ImageUrl">
            <summary>
            Supply the image url if it can be downloaded.
            </summary>
            <value>The image URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.HasImage">
            <summary>
            Gets or sets a value indicating whether this instance has image.
            </summary>
            <value><c>null</c> if [has image] contains no value, <c>true</c> if [has image]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsMovie">
            <summary>
            Gets or sets a value indicating whether this instance is movie.
            </summary>
            <value><c>true</c> if this instance is movie; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsSports">
            <summary>
            Gets or sets a value indicating whether this instance is sports.
            </summary>
            <value><c>true</c> if this instance is sports; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsSeries">
            <summary>
            Gets or sets a value indicating whether this instance is series.
            </summary>
            <value><c>true</c> if this instance is series; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsLive">
            <summary>
            Gets or sets a value indicating whether this instance is live.
            </summary>
            <value><c>true</c> if this instance is live; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsNews">
            <summary>
            Gets or sets a value indicating whether this instance is news.
            </summary>
            <value><c>true</c> if this instance is news; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsKids">
            <summary>
            Gets or sets a value indicating whether this instance is kids.
            </summary>
            <value><c>true</c> if this instance is kids; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsPremiere">
            <summary>
            Gets or sets a value indicating whether this instance is premiere.
            </summary>
            <value><c>true</c> if this instance is premiere; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.ProductionYear">
            <summary>
            Gets or sets the production year.
            </summary>
            <value>The production year.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.HomePageUrl">
            <summary>
            Gets or sets the home page URL.
            </summary>
            <value>The home page URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.SeriesId">
            <summary>
            Gets or sets the series identifier.
            </summary>
            <value>The series identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.ShowId">
            <summary>
            Gets or sets the show identifier.
            </summary>
            <value>The show identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.SeasonNumber">
            <summary>
            Gets or sets the season number.
            </summary>
            <value>The season number.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.EpisodeNumber">
            <summary>
            Gets or sets the episode number.
            </summary>
            <value>The episode number.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Id">
            <summary>
            Id of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.SeriesTimerId">
            <summary>
            Gets or sets the series timer identifier.
            </summary>
            <value>The series timer identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.TimerId">
            <summary>
            Gets or sets the timer identifier.
            </summary>
            <value>The timer identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.ChannelId">
            <summary>
            ChannelId of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.ChannelType">
            <summary>
            Gets or sets the type of the channel.
            </summary>
            <value>The type of the channel.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Name">
            <summary>
            Name of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Overview">
            <summary>
            Gets or sets the overview.
            </summary>
            <value>The overview.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.StartDate">
            <summary>
            The start date of the recording, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.EndDate">
            <summary>
            The end date of the recording, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.ProgramId">
            <summary>
            Gets or sets the program identifier.
            </summary>
            <value>The program identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Genres">
            <summary>
            Genre of the program.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsRepeat">
            <summary>
            Gets or sets a value indicating whether this instance is repeat.
            </summary>
            <value><c>true</c> if this instance is repeat; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.EpisodeTitle">
            <summary>
            Gets or sets the episode title.
            </summary>
            <value>The episode title.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsHD">
            <summary>
            Gets or sets a value indicating whether this instance is hd.
            </summary>
            <value><c>true</c> if this instance is hd; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Audio">
            <summary>
            Gets or sets the audio.
            </summary>
            <value>The audio.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.OriginalAirDate">
            <summary>
            Gets or sets the original air date.
            </summary>
            <value>The original air date.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsMovie">
            <summary>
            Gets or sets a value indicating whether this instance is movie.
            </summary>
            <value><c>true</c> if this instance is movie; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsSports">
            <summary>
            Gets or sets a value indicating whether this instance is sports.
            </summary>
            <value><c>true</c> if this instance is sports; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsSeries">
            <summary>
            Gets or sets a value indicating whether this instance is series.
            </summary>
            <value><c>true</c> if this instance is series; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsLive">
            <summary>
            Gets or sets a value indicating whether this instance is live.
            </summary>
            <value><c>true</c> if this instance is live; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsNews">
            <summary>
            Gets or sets a value indicating whether this instance is news.
            </summary>
            <value><c>true</c> if this instance is news; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsKids">
            <summary>
            Gets or sets a value indicating whether this instance is kids.
            </summary>
            <value><c>true</c> if this instance is kids; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsPremiere">
            <summary>
            Gets or sets a value indicating whether this instance is premiere.
            </summary>
            <value><c>true</c> if this instance is premiere; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.OfficialRating">
            <summary>
            Gets or sets the official rating.
            </summary>
            <value>The official rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.CommunityRating">
            <summary>
            Gets or sets the community rating.
            </summary>
            <value>The community rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.ImagePath">
            <summary>
            Supply the image path if it can be accessed directly from the file system.
            </summary>
            <value>The image path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.ImageUrl">
            <summary>
            Supply the image url if it can be downloaded.
            </summary>
            <value>The image URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.HasImage">
            <summary>
            Gets or sets a value indicating whether this instance has image.
            </summary>
            <value><c>null</c> if [has image] contains no value, <c>true</c> if [has image]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.ShowId">
            <summary>
            Gets or sets the show identifier.
            </summary>
            <value>The show identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.DateLastUpdated">
            <summary>
            Gets or sets the date last updated.
            </summary>
            <value>The date last updated.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.Id">
            <summary>
            Id of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.ChannelId">
            <summary>
            ChannelId of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.ProgramId">
            <summary>
            Gets or sets the program identifier.
            </summary>
            <value>The program identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.Name">
            <summary>
            Name of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.Overview">
            <summary>
            Description of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.StartDate">
            <summary>
            The start date of the recording, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.EndDate">
            <summary>
            The end date of the recording, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.RecordAnyTime">
            <summary>
            Gets or sets a value indicating whether [record any time].
            </summary>
            <value><c>true</c> if [record any time]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.RecordAnyChannel">
            <summary>
            Gets or sets a value indicating whether [record any channel].
            </summary>
            <value><c>true</c> if [record any channel]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.RecordNewOnly">
            <summary>
            Gets or sets a value indicating whether [record new only].
            </summary>
            <value><c>true</c> if [record new only]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.Days">
            <summary>
            Gets or sets the days.
            </summary>
            <value>The days.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.PrePaddingSeconds">
            <summary>
            Gets or sets the pre padding seconds.
            </summary>
            <value>The pre padding seconds.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.PostPaddingSeconds">
            <summary>
            Gets or sets the post padding seconds.
            </summary>
            <value>The post padding seconds.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.IsPrePaddingRequired">
            <summary>
            Gets or sets a value indicating whether this instance is pre padding required.
            </summary>
            <value><c>true</c> if this instance is pre padding required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.IsPostPaddingRequired">
            <summary>
            Gets or sets a value indicating whether this instance is post padding required.
            </summary>
            <value><c>true</c> if this instance is post padding required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.SeriesId">
            <summary>
            Gets or sets the series identifier.
            </summary>
            <value>The series identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.Id">
            <summary>
            Id of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.SeriesTimerId">
            <summary>
            Gets or sets the series timer identifier.
            </summary>
            <value>The series timer identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.ChannelId">
            <summary>
            ChannelId of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.ProgramId">
            <summary>
            Gets or sets the program identifier.
            </summary>
            <value>The program identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.Name">
            <summary>
            Name of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.Overview">
            <summary>
            Description of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.StartDate">
            <summary>
            The start date of the recording, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.EndDate">
            <summary>
            The end date of the recording, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.PrePaddingSeconds">
            <summary>
            Gets or sets the pre padding seconds.
            </summary>
            <value>The pre padding seconds.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.PostPaddingSeconds">
            <summary>
            Gets or sets the post padding seconds.
            </summary>
            <value>The post padding seconds.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.IsPrePaddingRequired">
            <summary>
            Gets or sets a value indicating whether this instance is pre padding required.
            </summary>
            <value><c>true</c> if this instance is pre padding required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.IsPostPaddingRequired">
            <summary>
            Gets or sets a value indicating whether this instance is post padding required.
            </summary>
            <value><c>true</c> if this instance is post padding required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.EpisodeNumber">
            <summary>
            Gets or sets the episode number.
            </summary>
            <value>The episode number.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.IsLive">
            <summary>
            Gets or sets a value indicating whether this instance is live.
            </summary>
            <value><c>true</c> if this instance is live; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetVideoEncoder(MediaBrowser.Controller.MediaEncoding.EncodingJobInfo,MediaBrowser.Model.Configuration.EncodingOptions)">
            <summary>
            Gets the name of the output video codec.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetUserAgentParam(MediaBrowser.Controller.MediaEncoding.EncodingJobInfo)">
            <summary>
            Gets the user agent param.
            </summary>
            <param name="state">The state.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.InferAudioCodec(System.String)">
            <summary>
            Infers the audio codec based on the url.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.InferVideoCodec(System.String)">
            <summary>
            Infers the video codec.
            </summary>
            <param name="url">The URL.</param>
            <returns>System.Nullable{VideoCodecs}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetAudioEncoder(MediaBrowser.Controller.MediaEncoding.EncodingJobInfo)">
            <summary>
            Gets the audio encoder.
            </summary>
            <param name="state">The state.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetInputArgument(MediaBrowser.Controller.MediaEncoding.EncodingJobInfo,MediaBrowser.Model.Configuration.EncodingOptions)">
            <summary>
            Gets the input argument.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.IsH264(MediaBrowser.Model.Entities.MediaStream)">
            <summary>
            Determines whether the specified stream is H264.
            </summary>
            <param name="stream">The stream.</param>
            <returns><c>true</c> if the specified stream is H264; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetTextSubtitleParam(MediaBrowser.Controller.MediaEncoding.EncodingJobInfo)">
            <summary>
            Gets the text subtitle param.
            </summary>
            <param name="state">The state.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetVideoQualityParam(MediaBrowser.Controller.MediaEncoding.EncodingJobInfo,System.String,MediaBrowser.Model.Configuration.EncodingOptions,System.String)">
            <summary>
            Gets the video bitrate to specify on the command line.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetNumAudioChannelsParam(MediaBrowser.Controller.MediaEncoding.EncodingJobInfo,MediaBrowser.Model.Entities.MediaStream,System.String)">
            <summary>
            Gets the number of audio channels to specify on the command line.
            </summary>
            <param name="state">The state.</param>
            <param name="audioStream">The audio stream.</param>
            <param name="outputAudioCodec">The output audio codec.</param>
            <returns>System.Nullable{System.Int32}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.EnforceResolutionLimit(MediaBrowser.Controller.MediaEncoding.EncodingJobInfo)">
            <summary>
            Enforces the resolution limit.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetFastSeekCommandLineParameter(MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions)">
            <summary>
            Gets the fast seek command line parameter.
            </summary>
            <param name="request">The request.</param>
            <returns>System.String.</returns>
            <value>The fast seek command line parameter.</value>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetMapArgs(MediaBrowser.Controller.MediaEncoding.EncodingJobInfo)">
            <summary>
            Gets the map args.
            </summary>
            <param name="state">The state.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetMediaStream(System.Collections.Generic.IEnumerable{MediaBrowser.Model.Entities.MediaStream},System.Nullable{System.Int32},MediaBrowser.Model.Entities.MediaStreamType,System.Boolean)">
            <summary>
            Determines which stream will be used for playback.
            </summary>
            <param name="allStream">All stream.</param>
            <param name="desiredIndex">Index of the desired.</param>
            <param name="type">The type.</param>
            <param name="returnFirstIfNoIndex">if set to <c>true</c> [return first if no index].</param>
            <returns>MediaStream.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetGraphicalSubtitleParam(MediaBrowser.Controller.MediaEncoding.EncodingJobInfo,MediaBrowser.Model.Configuration.EncodingOptions,System.String)">
            <summary>
            Gets the graphical subtitle param.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetOutputSizeParamInternal(MediaBrowser.Controller.MediaEncoding.EncodingJobInfo,MediaBrowser.Model.Configuration.EncodingOptions,System.String)">
            <summary>
            If we're going to put a fixed size on the command line, this will calculate it.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetNumberOfThreads(MediaBrowser.Controller.MediaEncoding.EncodingJobInfo,MediaBrowser.Model.Configuration.EncodingOptions,System.String)">
            <summary>
            Gets the number of threads.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetHardwareAcceleratedVideoDecoder(MediaBrowser.Controller.MediaEncoding.EncodingJobInfo,MediaBrowser.Model.Configuration.EncodingOptions)">
            <summary>
            Gets the ffmpeg option string for the hardware accelerated video decoder.
            </summary>
            <param name="state">The encoding job info.</param>
            <param name="encodingOptions">The encoding options.</param>
            <returns>The option string or null if none available.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetHwDecoderName(MediaBrowser.Model.Configuration.EncodingOptions,System.String,System.String,System.Boolean)">
            <summary>
            Gets a hw decoder name
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.EncodingHelper.GetHwaccelType(MediaBrowser.Controller.MediaEncoding.EncodingJobInfo,MediaBrowser.Model.Configuration.EncodingOptions,System.String,System.Boolean)">
            <summary>
            Gets a hwaccel type to use as a hardware decoder(dxva/vaapi) depending on the system
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.EncodingJobInfo.TargetVideoLevel">
            <summary>
            Predicts the audio sample rate that will be in the output stream.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.EncodingJobInfo.TargetVideoBitDepth">
            <summary>
            Predicts the audio sample rate that will be in the output stream.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.EncodingJobInfo.TargetRefFrames">
            <summary>
            Gets the target reference frames.
            </summary>
            <value>The target reference frames.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.EncodingJobInfo.TargetFramerate">
            <summary>
            Predicts the audio sample rate that will be in the output stream.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.EncodingJobInfo.TargetPacketLength">
            <summary>
            Predicts the audio sample rate that will be in the output stream.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.EncodingJobInfo.TargetVideoProfile">
            <summary>
            Predicts the audio sample rate that will be in the output stream.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.TranscodingJobType">
            <summary>
            Enum TranscodingJobType.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.MediaEncoding.TranscodingJobType.Progressive">
            <summary>
            The progressive.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.MediaEncoding.TranscodingJobType.Hls">
            <summary>
            The HLS.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.MediaEncoding.TranscodingJobType.Dash">
            <summary>
            The dash.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.EncodingJobOptions.HasFixedResolution">
            <summary>
            Gets a value indicating whether this instance has fixed resolution.
            </summary>
            <value><c>true</c> if this instance has fixed resolution; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.AudioCodec">
            <summary>
            Gets or sets the audio codec.
            </summary>
            <value>The audio codec.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.AudioSampleRate">
            <summary>
            Gets or sets the audio sample rate.
            </summary>
            <value>The audio sample rate.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.AudioBitRate">
            <summary>
            Gets or sets the audio bit rate.
            </summary>
            <value>The audio bit rate.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.AudioChannels">
            <summary>
            Gets or sets the audio channels.
            </summary>
            <value>The audio channels.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.Profile">
            <summary>
            Gets or sets the profile.
            </summary>
            <value>The profile.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.Level">
            <summary>
            Gets or sets the level.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.Framerate">
            <summary>
            Gets or sets the framerate.
            </summary>
            <value>The framerate.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.StartTimeTicks">
            <summary>
            Gets or sets the start time ticks.
            </summary>
            <value>The start time ticks.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.MaxWidth">
            <summary>
            Gets or sets the width of the max.
            </summary>
            <value>The width of the max.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.MaxHeight">
            <summary>
            Gets or sets the height of the max.
            </summary>
            <value>The height of the max.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.VideoBitRate">
            <summary>
            Gets or sets the video bit rate.
            </summary>
            <value>The video bit rate.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.SubtitleStreamIndex">
            <summary>
            Gets or sets the index of the subtitle stream.
            </summary>
            <value>The index of the subtitle stream.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.VideoCodec">
            <summary>
            Gets or sets the video codec.
            </summary>
            <value>The video codec.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.AudioStreamIndex">
            <summary>
            Gets or sets the index of the audio stream.
            </summary>
            <value>The index of the audio stream.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.VideoStreamIndex">
            <summary>
            Gets or sets the index of the video stream.
            </summary>
            <value>The index of the video stream.</value>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IEncodingManager.RefreshChapterImages(MediaBrowser.Controller.Entities.Video,MediaBrowser.Controller.Providers.IDirectoryService,System.Collections.Generic.IReadOnlyList{MediaBrowser.Model.Entities.ChapterInfo},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Refreshes the chapter images.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.IMediaEncoder">
            <summary>
            Interface IMediaEncoder.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.EncoderLocation">
            <summary>
            The location of the discovered FFmpeg tool.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.EncoderPath">
            <summary>
            Gets the encoder path.
            </summary>
            <value>The encoder path.</value>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.SupportsEncoder(System.String)">
            <summary>
            Whether given encoder codec is supported.
            </summary>
            <param name="encoder">The encoder.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.SupportsDecoder(System.String)">
            <summary>
            Whether given decoder codec is supported.
            </summary>
            <param name="decoder">The decoder.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.SupportsHwaccel(System.String)">
            <summary>
            Whether given hardware acceleration type is supported.
            </summary>
            <param name="hwaccel">The hwaccel.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.SupportsFilter(System.String,System.String)">
            <summary>
            Whether given filter is supported.
            </summary>
            <param name="filter">The filter.</param>
            <param name="option">The option.</param>
            <returns><c>true</c> if the filter is supported, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.ExtractAudioImage(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Extracts the audio image.
            </summary>
            <param name="path">The path.</param>
            <param name="imageStreamIndex">Index of the image stream.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{Stream}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.ExtractVideoImage(System.String,System.String,MediaBrowser.Model.Dto.MediaSourceInfo,MediaBrowser.Model.Entities.MediaStream,System.Nullable{MediaBrowser.Model.Entities.Video3DFormat},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Extracts the video image.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.ExtractVideoImagesOnInterval(System.String,System.String,MediaBrowser.Model.Entities.MediaStream,MediaBrowser.Model.Dto.MediaSourceInfo,System.Nullable{MediaBrowser.Model.Entities.Video3DFormat},System.TimeSpan,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Extracts the video images on interval.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.GetMediaInfo(MediaBrowser.Controller.MediaEncoding.MediaInfoRequest,System.Threading.CancellationToken)">
            <summary>
            Gets the media info.
            </summary>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.GetInputArgument(System.String,MediaBrowser.Model.Dto.MediaSourceInfo)">
            <summary>
            Gets the input argument.
            </summary>
            <param name="inputFile">The input file.</param>
            <param name="mediaSource">The mediaSource.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.GetTimeParameter(System.Int64)">
            <summary>
            Gets the time parameter.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.EscapeSubtitleFilterPath(System.String)">
            <summary>
            Escapes the subtitle filter path.
            </summary>
            <param name="path">The path.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.ISubtitleEncoder.GetSubtitles(MediaBrowser.Controller.Entities.BaseItem,System.String,System.Int32,System.String,System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the subtitles.
            </summary>
            <returns>Task{Stream}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.ISubtitleEncoder.GetSubtitleFileCharacterSet(System.String,System.String,MediaBrowser.Model.MediaInfo.MediaProtocol,System.Threading.CancellationToken)">
            <summary>
            Gets the subtitle language encoding parameter.
            </summary>
            <param name="path">The path.</param>
            <param name="language">The language.</param>
            <param name="protocol">The protocol.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.MediaEncoderHelpers">
            <summary>
            Class MediaEncoderHelpers.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Net.AuthorizationInfo">
            <summary>
            The request authorization info.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.UserId">
            <summary>
            Gets the user identifier.
            </summary>
            <value>The user identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.DeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
            <value>The device identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.Device">
            <summary>
            Gets or sets the device.
            </summary>
            <value>The device.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>The client.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.IsApiKey">
            <summary>
            Gets or sets a value indicating whether the authorization is from an api key.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.User">
            <summary>
            Gets or sets the user making the request.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.IsAuthenticated">
            <summary>
            Gets or sets a value indicating whether the token is authenticated.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.HasToken">
            <summary>
            Gets or sets a value indicating whether the request has a token.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2">
            <summary>
            Starts sending data over a web socket periodically when a message is received, and then stops when a corresponding stop message is received.
            </summary>
            <typeparam name="TReturnDataType">The type of the T return data type.</typeparam>
            <typeparam name="TStateType">The type of the T state type.</typeparam>
        </member>
        <member name="F:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2._activeConnections">
            <summary>
            The _active connections.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.Type">
            <summary>
            Gets the type used for the messages sent to the client.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.StartType">
            <summary>
            Gets the message type received from the client to start sending messages.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.StopType">
            <summary>
            Gets the message type received from the client to stop sending messages.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.GetDataToSend">
            <summary>
            Gets the data to send.
            </summary>
            <returns>Task{`1}.</returns>
        </member>
        <member name="F:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.ProcessMessageAsync(MediaBrowser.Controller.Net.WebSocketMessageInfo)">
            <summary>
            Processes the message.
            </summary>
            <param name="message">The message.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.ProcessWebSocketConnectedAsync(MediaBrowser.Controller.Net.IWebSocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.Start(MediaBrowser.Controller.Net.WebSocketMessageInfo)">
            <summary>
            Starts sending messages over a web socket.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.Stop(MediaBrowser.Controller.Net.WebSocketMessageInfo)">
            <summary>
            Stops sending messages over a web socket.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.DisposeConnection(System.Tuple{MediaBrowser.Controller.Net.IWebSocketConnection,System.Threading.CancellationTokenSource,`1})">
            <summary>
            Disposes the connection.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Net.IAuthorizationContext">
            <summary>
            IAuthorization context.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IAuthorizationContext.GetAuthorizationInfo(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Gets the authorization information.
            </summary>
            <param name="requestContext">The request context.</param>
            <returns>AuthorizationInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IAuthorizationContext.GetAuthorizationInfo(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Gets the authorization information.
            </summary>
            <param name="requestContext">The request context.</param>
            <returns>AuthorizationInfo.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Net.IAuthService">
            <summary>
            IAuthService.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IAuthService.Authenticate(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Authenticate request.
            </summary>
            <param name="request">The request.</param>
            <returns>Authorization information. Null if unauthenticated.</returns>
        </member>
        <member name="E:MediaBrowser.Controller.Net.IWebSocketConnection.Closed">
            <summary>
            Occurs when [closed].
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Net.IWebSocketConnection.LastActivityDate">
            <summary>
            Gets the last activity date.
            </summary>
            <value>The last activity date.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.IWebSocketConnection.LastKeepAliveDate">
            <summary>
            Gets or sets the date of last Keeplive received.
            </summary>
            <value>The date of last Keeplive received.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.IWebSocketConnection.QueryString">
            <summary>
            Gets or sets the query string.
            </summary>
            <value>The query string.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.IWebSocketConnection.OnReceive">
            <summary>
            Gets or sets the receive action.
            </summary>
            <value>The receive action.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.IWebSocketConnection.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.IWebSocketConnection.RemoteEndPoint">
            <summary>
            Gets the remote end point.
            </summary>
            <value>The remote end point.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IWebSocketConnection.SendAsync``1(MediaBrowser.Model.Net.WebSocketMessage{``0},System.Threading.CancellationToken)">
            <summary>
            Sends a message asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">message</exception>
        </member>
        <member name="T:MediaBrowser.Controller.Net.IWebSocketListener">
            <summary>
            Interface for listening to messages coming through a web socket connection.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IWebSocketListener.ProcessMessageAsync(MediaBrowser.Controller.Net.WebSocketMessageInfo)">
            <summary>
            Processes the message.
            </summary>
            <param name="message">The message.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IWebSocketListener.ProcessWebSocketConnectedAsync(MediaBrowser.Controller.Net.IWebSocketConnection)">
            <summary>
            Processes a new web socket connection.
            </summary>
            <param name="connection">An instance of the <see cref="T:MediaBrowser.Controller.Net.IWebSocketConnection"/> interface.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Net.IWebSocketManager">
            <summary>
            Interface IHttpServer.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IWebSocketManager.WebSocketRequestHandler(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            The HTTP request handler.
            </summary>
            <param name="context">The current HTTP context.</param>
            <returns>The task.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Net.SecurityException">
            <summary>
            The exception that is thrown when a user is authenticated, but not authorized to access a requested resource.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Net.SecurityException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Net.SecurityException"/> class.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Net.SecurityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Net.SecurityException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Net.SecurityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Net.SecurityException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:MediaBrowser.Controller.Net.WebSocketMessageInfo">
            <summary>
            Class WebSocketMessageInfo.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Net.WebSocketMessageInfo.Connection">
            <summary>
            Gets or sets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Notifications.INotificationManager.SendNotification(MediaBrowser.Model.Notifications.NotificationRequest,System.Threading.CancellationToken)">
            <summary>
            Sends the notification.
            </summary>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Notifications.INotificationManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Notifications.INotificationService},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Notifications.INotificationTypeFactory})">
            <summary>
            Adds the parts.
            </summary>
            <param name="services">The services.</param>
            <param name="notificationTypeFactories">The notification type factories.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Notifications.INotificationManager.GetNotificationTypes">
            <summary>
            Gets the notification types.
            </summary>
            <returns>IEnumerable{NotificationTypeInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Notifications.INotificationManager.GetNotificationServices">
            <summary>
            Gets the notification services.
            </summary>
            <returns>IEnumerable{NotificationServiceInfo}.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Notifications.INotificationService.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Notifications.INotificationService.SendNotification(MediaBrowser.Controller.Notifications.UserNotification,System.Threading.CancellationToken)">
            <summary>
            Sends the notification.
            </summary>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Notifications.INotificationService.IsEnabledForUser(Jellyfin.Data.Entities.User)">
            <summary>
            Determines whether [is enabled for user] [the specified user identifier].
            </summary>
            <param name="user">The user.</param>
            <returns><c>true</c> if [is enabled for user] [the specified user identifier]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Notifications.INotificationTypeFactory.GetNotificationTypes">
            <summary>
            Gets the notification types.
            </summary>
            <returns>IEnumerable{NotificationTypeInfo}.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Persistence.IItemRepository">
            <summary>
            Provides an interface to implement an Item repository.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.SaveItem(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <summary>
            Saves an item.
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.DeleteItem(System.Guid)">
            <summary>
            Deletes the item.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.SaveItems(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Entities.BaseItem},System.Threading.CancellationToken)">
            <summary>
            Saves the items.
            </summary>
            <param name="items">The items.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.RetrieveItem(System.Guid)">
            <summary>
            Retrieves the item.
            </summary>
            <param name="id">The id.</param>
            <returns>BaseItem.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetChapters(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets chapters for an item.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetChapter(MediaBrowser.Controller.Entities.BaseItem,System.Int32)">
            <summary>
            Gets a single chapter for an item.
            </summary>
            <param name="id"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.SaveChapters(System.Guid,System.Collections.Generic.IReadOnlyList{MediaBrowser.Model.Entities.ChapterInfo})">
            <summary>
            Saves the chapters.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetMediaStreams(MediaBrowser.Controller.Persistence.MediaStreamQuery)">
            <summary>
            Gets the media streams.
            </summary>
            <param name="query">The query.</param>
            <returns>IEnumerable{MediaStream}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.SaveMediaStreams(System.Guid,System.Collections.Generic.List{MediaBrowser.Model.Entities.MediaStream},System.Threading.CancellationToken)">
            <summary>
            Saves the media streams.
            </summary>
            <param name="id">The identifier.</param>
            <param name="streams">The streams.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetMediaAttachments(MediaBrowser.Controller.Persistence.MediaAttachmentQuery)">
            <summary>
            Gets the media attachments.
            </summary>
            <param name="query">The query.</param>
            <returns>IEnumerable{MediaAttachment}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.SaveMediaAttachments(System.Guid,System.Collections.Generic.IReadOnlyList{MediaBrowser.Model.Entities.MediaAttachment},System.Threading.CancellationToken)">
            <summary>
            Saves the media attachments.
            </summary>
            <param name="id">The identifier.</param>
            <param name="attachments">The attachments.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetItemIds(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the item ids.
            </summary>
            <param name="query">The query.</param>
            <returns>IEnumerable&lt;Guid&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetItems(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the items.
            </summary>
            <param name="query">The query.</param>
            <returns>QueryResult&lt;BaseItem&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetItemIdsList(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the item ids list.
            </summary>
            <param name="query">The query.</param>
            <returns>List&lt;Guid&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetPeople(MediaBrowser.Controller.Entities.InternalPeopleQuery)">
            <summary>
            Gets the people.
            </summary>
            <param name="query">The query.</param>
            <returns>List&lt;PersonInfo&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.UpdatePeople(System.Guid,System.Collections.Generic.List{MediaBrowser.Controller.Entities.PersonInfo})">
            <summary>
            Updates the people.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="people">The people.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetPeopleNames(MediaBrowser.Controller.Entities.InternalPeopleQuery)">
            <summary>
            Gets the people names.
            </summary>
            <param name="query">The query.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetItemIdsWithPath(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the item ids with path.
            </summary>
            <param name="query">The query.</param>
            <returns>QueryResult&lt;Tuple&lt;Guid, System.String&gt;&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetItemList(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the item list.
            </summary>
            <param name="query">The query.</param>
            <returns>List&lt;BaseItem&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.UpdateInheritedValues(System.Threading.CancellationToken)">
            <summary>
            Updates the inherited values.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="T:MediaBrowser.Controller.Persistence.IRepository">
            <summary>
            Provides a base interface for all the repository interfaces.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Persistence.IRepository.Name">
            <summary>
            Gets the name of the repository.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Persistence.IUserDataRepository">
            <summary>
            Provides an interface to implement a UserData repository.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IUserDataRepository.SaveUserData(System.Int64,System.String,MediaBrowser.Controller.Entities.UserItemData,System.Threading.CancellationToken)">
            <summary>
            Saves the user data.
            </summary>
            <param name="userId">The user id.</param>
            <param name="key">The key.</param>
            <param name="userData">The user data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IUserDataRepository.GetUserData(System.Int64,System.String)">
            <summary>
            Gets the user data.
            </summary>
            <param name="userId">The user id.</param>
            <param name="key">The key.</param>
            <returns>The user data.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IUserDataRepository.GetUserData(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the user data.
            </summary>
            <param name="userId">The user id.</param>
            <param name="keys">The keys.</param>
            <returns>The user data.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IUserDataRepository.GetAllUserData(System.Int64)">
            <summary>
            Return all user data associated with the given user.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IUserDataRepository.SaveAllUserData(System.Int64,MediaBrowser.Controller.Entities.UserItemData[],System.Threading.CancellationToken)">
            <summary>
            Save all user data associated with the given user.
            </summary>
            <param name="userId"></param>
            <param name="userData"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:MediaBrowser.Controller.Persistence.MediaAttachmentQuery.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Persistence.MediaAttachmentQuery.ItemId">
            <summary>
            Gets or sets the item identifier.
            </summary>
            <value>The item identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Persistence.MediaStreamQuery.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Persistence.MediaStreamQuery.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Persistence.MediaStreamQuery.ItemId">
            <summary>
            Gets or sets the item identifier.
            </summary>
            <value>The item identifier.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Playlists.IPlaylistManager.GetPlaylists(System.Guid)">
            <summary>
            Gets the playlists.
            </summary>
            <param name="userId">The user identifier.</param>
            <returns>IEnumerable&lt;Playlist&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Playlists.IPlaylistManager.CreatePlaylist(MediaBrowser.Model.Playlists.PlaylistCreationRequest)">
            <summary>
            Creates the playlist.
            </summary>
            <param name="options">The options.</param>
            <returns>Task&lt;Playlist&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Playlists.IPlaylistManager.AddToPlaylistAsync(System.Guid,System.Collections.Generic.IReadOnlyCollection{System.Guid},System.Guid)">
            <summary>
            Adds to playlist.
            </summary>
            <param name="playlistId">The playlist identifier.</param>
            <param name="itemIds">The item ids.</param>
            <param name="userId">The user identifier.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Playlists.IPlaylistManager.RemoveFromPlaylistAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes from playlist.
            </summary>
            <param name="playlistId">The playlist identifier.</param>
            <param name="entryIds">The entry ids.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Playlists.IPlaylistManager.GetPlaylistsFolder(System.Guid)">
            <summary>
            Gets the playlists folder.
            </summary>
            <param name="userId">The user identifier.</param>
            <returns>Folder.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Playlists.IPlaylistManager.MoveItemAsync(System.String,System.String,System.Int32)">
            <summary>
            Moves the item.
            </summary>
            <param name="playlistId">The playlist identifier.</param>
            <param name="entryId">The entry identifier.</param>
            <param name="newIndex">The new index.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Plugins.IPluginConfigurationPage">
            <summary>
            Interface IConfigurationPage.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Plugins.IPluginConfigurationPage.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Plugins.IPluginConfigurationPage.ConfigurationPageType">
            <summary>
            Gets the type of the configuration page.
            </summary>
            <value>The type of the configuration page.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Plugins.IPluginConfigurationPage.Plugin">
            <summary>
            Gets the plugin.
            </summary>
            <value>The plugin.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Plugins.IPluginConfigurationPage.GetHtmlStream">
            <summary>
            Gets the HTML stream.
            </summary>
            <returns>Stream.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Plugins.ConfigurationPageType">
            <summary>
            Enum ConfigurationPageType.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Plugins.ConfigurationPageType.PluginConfiguration">
            <summary>
            The plugin configuration.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Plugins.ConfigurationPageType.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Plugins.IServerEntryPoint">
            <summary>
            Represents an entry point for a module in the application. This interface is scanned for automatically and
            provides a hook to initialize the module at application start.
            The entry point can additionally be flagged as a pre-startup task by implementing the
            <see cref="T:MediaBrowser.Controller.Plugins.IRunBeforeStartup"/> interface.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Plugins.IServerEntryPoint.RunAsync">
            <summary>
            Run the initialization for this module. This method is invoked at application start.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Plugins.IRunBeforeStartup">
            <summary>
            Indicates that a <see cref="T:MediaBrowser.Controller.Plugins.IServerEntryPoint"/> should be invoked as a pre-startup task.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.AlbumInfo.AlbumArtists">
            <summary>
            Gets or sets the album artist.
            </summary>
            <value>The album artist.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.AlbumInfo.ArtistProviderIds">
            <summary>
            Gets or sets the artist provider ids.
            </summary>
            <value>The artist provider ids.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.ICustomMetadataProvider`1.FetchAsync(`0,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Fetches the metadata asynchronously.
            </summary>
            <param name="item">The item.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{ItemUpdateType}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IDynamicImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the supported images.
            </summary>
            <param name="item">The item.</param>
            <returns>IEnumerable{ImageType}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IDynamicImageProvider.GetImage(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Threading.CancellationToken)">
            <summary>
            Gets the image.
            </summary>
            <param name="item">The item.</param>
            <param name="type">The type.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{DynamicImageResponse}.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.IExternalId">
            <summary>
            Represents an identifier for an external provider.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.IExternalId.ProviderName">
            <summary>
            Gets the display name of the provider associated with this ID type.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.IExternalId.Key">
            <summary>
            Gets the unique key to distinguish this provider/type pair. This should be unique across providers.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.IExternalId.Type">
            <summary>
            Gets the specific media type for this id. This is used to distinguish between the different
            external id types for providers with multiple ids.
            A null value indicates there is no specific media type associated with the external id, or this is the
            default id for the external provider so there is no need to specify a type.
            </summary>
            <remarks>
            This can be used along with the <see cref="P:MediaBrowser.Controller.Providers.IExternalId.ProviderName"/> to localize the external id on the client.
            </remarks>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.IExternalId.UrlFormatString">
            <summary>
            Gets the URL format string for this id.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <summary>
            Determines whether this id supports a given item type.
            </summary>
            <param name="item">The item.</param>
            <returns>True if this item is supported, otherwise false.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.IForcedProvider">
            <summary>
            This is a marker interface that will cause a provider to run even if an item is locked from changes.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IHasItemChangeMonitor.HasChanged(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Determines whether the specified item has changed.
            </summary>
            <param name="item">The item.</param>
            <param name="directoryService">The directory service.</param>
            <returns><c>true</c> if the specified item has changed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.IImageProvider">
            <summary>
            Interface IImageProvider.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.IImageProvider.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Supports the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if the provider supports the item.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.ILocalImageProvider">
            <summary>
            This is just a marker interface.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.ILocalMetadataProvider`1.GetMetadata(MediaBrowser.Controller.Providers.ItemInfo,MediaBrowser.Controller.Providers.IDirectoryService,System.Threading.CancellationToken)">
            <summary>
            Gets the metadata.
            </summary>
            <param name="info">The information.</param>
            <param name="directoryService">The directory service.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{MetadataResult{0}}.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.IMetadataProvider">
            <summary>
            Marker interface.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.IMetadataProvider.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IMetadataService.CanRefresh(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Determines whether this instance can refresh the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if this instance can refresh the specified item.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IMetadataService.RefreshMetadata(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Refreshes the metadata.
            </summary>
            <param name="item">The item.</param>
            <param name="refreshOptions">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.IMetadataService.Order">
            <summary>
            Gets the order.
            </summary>
            <value>The order.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.IProviderManager">
            <summary>
            Interface IProviderManager.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.QueueRefresh(System.Guid,MediaBrowser.Controller.Providers.MetadataRefreshOptions,MediaBrowser.Controller.Providers.RefreshPriority)">
            <summary>
            Queues the refresh.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.RefreshFullItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Refreshes the full item.
            </summary>
            <param name="item">The item.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.RefreshSingleItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Refreshes the metadata.
            </summary>
            <param name="item">The item.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.RunMetadataRefresh(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Runs multiple metadata refreshes concurrently.
            </summary>
            <param name="action">The action to run.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.SaveImage(MediaBrowser.Controller.Entities.BaseItem,System.String,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Saves the image.
            </summary>
            <param name="item">The item.</param>
            <param name="url">The URL.</param>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.SaveImage(MediaBrowser.Controller.Entities.BaseItem,System.IO.Stream,System.String,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Saves the image.
            </summary>
            <param name="item">The item.</param>
            <param name="source">The source.</param>
            <param name="mimeType">Type of the MIME.</param>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.SaveImage(MediaBrowser.Controller.Entities.BaseItem,System.String,System.String,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Saves the image.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IImageProvider},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IMetadataService},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IMetadataProvider},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Library.IMetadataSaver},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IExternalId})">
            <summary>
            Adds the metadata providers.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.GetAvailableRemoteImages(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Providers.RemoteImageQuery,System.Threading.CancellationToken)">
            <summary>
            Gets the available remote images.
            </summary>
            <param name="item">The item.</param>
            <param name="query">The query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IEnumerable{RemoteImageInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.GetRemoteImageProviderInfo(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the image providers.
            </summary>
            <param name="item">The item.</param>
            <returns>IEnumerable{ImageProviderInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.GetAllMetadataPlugins">
            <summary>
            Gets all metadata plugins.
            </summary>
            <returns>IEnumerable{MetadataPlugin}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.GetExternalUrls(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the external urls.
            </summary>
            <param name="item">The item.</param>
            <returns>IEnumerable{ExternalUrl}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.GetExternalIdInfos(MediaBrowser.Model.Entities.IHasProviderIds)">
            <summary>
            Gets the external identifier infos.
            </summary>
            <param name="item">The item.</param>
            <returns>IEnumerable{ExternalIdInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.SaveMetadata(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType)">
            <summary>
            Saves the metadata.
            </summary>
            <param name="item">The item.</param>
            <param name="updateType">Type of the update.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.SaveMetadata(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves the metadata.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.GetMetadataOptions(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the metadata options.
            </summary>
            <param name="item">The item.</param>
            <returns>MetadataOptions.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.GetRemoteSearchResults``2(MediaBrowser.Controller.Providers.RemoteSearchQuery{``1},System.Threading.CancellationToken)">
            <summary>
            Gets the remote search results.
            </summary>
            <typeparam name="TItemType">The type of the t item type.</typeparam>
            <typeparam name="TLookupType">The type of the t lookup type.</typeparam>
            <param name="searchInfo">The search information.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IEnumerable{SearchResult{``1}}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.GetSearchImage(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the search image.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="url">The URL.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{HttpResponseInfo}.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.IRemoteImageProvider">
            <summary>
            Interface IImageProvider.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IRemoteImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the supported images.
            </summary>
            <param name="item">The item.</param>
            <returns>IEnumerable{ImageType}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IRemoteImageProvider.GetImages(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <summary>
            Gets the images.
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IEnumerable{RemoteImageInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IRemoteImageProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the image response.
            </summary>
            <param name="url">The URL.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{HttpResponseInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IRemoteSearchProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the image response.
            </summary>
            <param name="url">The URL.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{HttpResponseInfo}.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.ItemLookupInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.ItemLookupInfo.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.ItemLookupInfo.MetadataLanguage">
            <summary>
            Gets or sets the metadata language.
            </summary>
            <value>The metadata language.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.ItemLookupInfo.MetadataCountryCode">
            <summary>
            Gets or sets the metadata country code.
            </summary>
            <value>The metadata country code.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.ItemLookupInfo.ProviderIds">
            <summary>
            Gets or sets the provider ids.
            </summary>
            <value>The provider ids.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.ItemLookupInfo.Year">
            <summary>
            Gets or sets the year.
            </summary>
            <value>The year.</value>
        </member>
        <member name="F:MediaBrowser.Controller.Providers.MetadataRefreshMode.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Providers.MetadataRefreshMode.ValidationOnly">
            <summary>
            The validation only.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Providers.MetadataRefreshMode.Default">
            <summary>
            Providers will be executed based on default rules.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Providers.MetadataRefreshMode.FullRefresh">
            <summary>
            All providers will be executed to search for new metadata.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.MetadataRefreshOptions.ReplaceAllMetadata">
            <summary>
            When paired with MetadataRefreshMode=FullRefresh, all existing data will be overwritten with new data from the providers.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.MetadataResult`1.ResetPeople">
            <summary>
            Not only does this clear, but initializes the list so that services can differentiate between a null list and zero people.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.RemoteSearchQuery`1.SearchProviderName">
            <summary>
            Will only search within the given provider when set.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.RemoteSearchQuery`1.IncludeDisabledProviders">
            <summary>
            Gets or sets a value indicating whether disabled providers should be included.
            </summary>
            <value><c>true</c> if disabled providers should be included.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.VideoContentType">
            <summary>
            Enum VideoContentType.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Providers.VideoContentType.Episode">
            <summary>
            The episode.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Providers.VideoContentType.Movie">
            <summary>
            The movie.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.QuickConnect.IQuickConnect">
            <summary>
            Quick connect standard interface.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.QuickConnect.IQuickConnect.CodeLength">
            <summary>
            Gets or sets the length of user facing codes.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.QuickConnect.IQuickConnect.TokenName">
            <summary>
            Gets or sets the name of internal access tokens.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.QuickConnect.IQuickConnect.State">
            <summary>
            Gets the current state of quick connect.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.QuickConnect.IQuickConnect.Timeout">
            <summary>
            Gets or sets the time (in minutes) before quick connect will automatically deactivate.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.QuickConnect.IQuickConnect.AssertActive">
            <summary>
            Assert that quick connect is currently active and throws an exception if it is not.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.QuickConnect.IQuickConnect.Activate">
            <summary>
            Temporarily activates quick connect for a short amount of time.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.QuickConnect.IQuickConnect.SetState(MediaBrowser.Model.QuickConnect.QuickConnectState)">
            <summary>
            Changes the state of quick connect.
            </summary>
            <param name="newState">New state to change to.</param>
        </member>
        <member name="M:MediaBrowser.Controller.QuickConnect.IQuickConnect.TryConnect">
            <summary>
            Initiates a new quick connect request.
            </summary>
            <returns>A quick connect result with tokens to proceed or throws an exception if not active.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.QuickConnect.IQuickConnect.CheckRequestStatus(System.String)">
            <summary>
            Checks the status of an individual request.
            </summary>
            <param name="secret">Unique secret identifier of the request.</param>
            <returns>Quick connect result.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.QuickConnect.IQuickConnect.AuthorizeRequest(System.Guid,System.String)">
            <summary>
            Authorizes a quick connect request to connect as the calling user.
            </summary>
            <param name="userId">User id.</param>
            <param name="code">Identifying code for the request.</param>
            <returns>A boolean indicating if the authorization completed successfully.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.QuickConnect.IQuickConnect.ExpireRequests(System.Boolean)">
            <summary>
            Expire quick connect requests that are over the time limit. If <paramref name="expireAll"/> is true, all requests are unconditionally expired.
            </summary>
            <param name="expireAll">If true, all requests will be expired.</param>
        </member>
        <member name="M:MediaBrowser.Controller.QuickConnect.IQuickConnect.DeleteAllDevices(System.Guid)">
            <summary>
            Deletes all quick connect access tokens for the provided user.
            </summary>
            <param name="user">Guid of the user to delete tokens for.</param>
            <returns>A count of the deleted tokens.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.QuickConnect.IQuickConnect.GenerateCode">
            <summary>
            Generates a short code to display to the user to uniquely identify this request.
            </summary>
            <returns>A short, unique alphanumeric string.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Resolvers.ItemResolver`1">
            <summary>
            Class ItemResolver.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MediaBrowser.Controller.Resolvers.ItemResolver`1.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns>`0.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Resolvers.ItemResolver`1.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Resolvers.ItemResolver`1.SetInitialItemValues(`0,MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Sets initial values on the newly resolved item.
            </summary>
            <param name="item">The item.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Resolvers.ItemResolver`1.MediaBrowser#Controller#Resolvers#IItemResolver#ResolvePath(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the path.
            </summary>
            <param name="args">The args.</param>
            <returns>BaseItem.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Resolvers.IItemResolver">
            <summary>
            Interface IItemResolver.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Resolvers.IItemResolver.ResolvePath(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the path.
            </summary>
            <param name="args">The args.</param>
            <returns>BaseItem.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Resolvers.IItemResolver.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Resolvers.IResolverIgnoreRule">
            <summary>
            Provides a base "rule" that anyone can use to have paths ignored by the resolver
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Resolvers.IResolverIgnoreRule.ShouldIgnore(MediaBrowser.Model.IO.FileSystemMetadata,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Checks whether or not the file should be ignored.
            </summary>
            <param name="fileInfo">The file information.</param>
            <param name="parent">The parent BaseItem.</param>
            <returns>True if the file should be ignored.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Resolvers.ResolverPriority">
            <summary>
            Enum ResolverPriority.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Resolvers.ResolverPriority.First">
            <summary>
            The first.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Resolvers.ResolverPriority.Second">
            <summary>
            The second.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Resolvers.ResolverPriority.Third">
            <summary>
            The third.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Resolvers.ResolverPriority.Fourth">
            <summary>
            The Fourth.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Resolvers.ResolverPriority.Fifth">
            <summary>
            The Fifth.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Resolvers.ResolverPriority.Last">
            <summary>
            The last.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.DeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
            <value>The device identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.AppName">
            <summary>
            Gets or sets the name of the application.
            </summary>
            <value>The name of the application.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.AppVersion">
            <summary>
            Gets or sets the application version.
            </summary>
            <value>The application version.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.DeviceName">
            <summary>
            Gets or sets the name of the device.
            </summary>
            <value>The name of the device.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>The user identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
            <value>The date created.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.DateRevoked">
            <summary>
            Gets or sets the date revoked.
            </summary>
            <value>The date revoked.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfoQuery.DeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
            <value>The device identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfoQuery.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>The user identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfoQuery.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfoQuery.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value><c>null</c> if [is active] contains no value, <c>true</c> if [is active]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfoQuery.HasUser">
            <summary>
            Gets or sets a value indicating whether this instance has user.
            </summary>
            <value><c>null</c> if [has user] contains no value, <c>true</c> if [has user]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfoQuery.StartIndex">
            <summary>
            Gets or sets the start index.
            </summary>
            <value>The start index.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfoQuery.Limit">
            <summary>
            Gets or sets the limit.
            </summary>
            <value>The limit.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Security.IAuthenticationRepository.Create(MediaBrowser.Controller.Security.AuthenticationInfo)">
            <summary>
            Creates the specified information.
            </summary>
            <param name="info">The information.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Security.IAuthenticationRepository.Update(MediaBrowser.Controller.Security.AuthenticationInfo)">
            <summary>
            Updates the specified information.
            </summary>
            <param name="info">The information.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Security.IAuthenticationRepository.Get(MediaBrowser.Controller.Security.AuthenticationInfoQuery)">
            <summary>
            Gets the specified query.
            </summary>
            <param name="query">The query.</param>
            <returns>QueryResult{AuthenticationInfo}.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Session.ISessionController.IsSessionActive">
            <summary>
            Gets a value indicating whether this instance is session active.
            </summary>
            <value><c>true</c> if this instance is session active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.ISessionController.SupportsMediaControl">
            <summary>
            Gets a value indicating whether [supports media remote control].
            </summary>
            <value><c>true</c> if [supports media remote control]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionController.SendMessage``1(MediaBrowser.Model.Session.SessionMessageType,System.Guid,``0,System.Threading.CancellationToken)">
            <summary>
            Sends the message.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Session.ISessionManager">
            <summary>
            Interface ISessionManager.
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.PlaybackStart">
            <summary>
            Occurs when [playback start].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.PlaybackProgress">
            <summary>
            Occurs when [playback progress].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.PlaybackStopped">
            <summary>
            Occurs when [playback stopped].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.SessionStarted">
            <summary>
            Occurs when [session started].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.SessionEnded">
            <summary>
            Occurs when [session ended].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.SessionControllerConnected">
            <summary>
            Occurs when [session controller connected].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.CapabilitiesChanged">
            <summary>
            Occurs when [capabilities changed].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.AuthenticationFailed">
            <summary>
            Occurs when [authentication failed].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.AuthenticationSucceeded">
            <summary>
            Occurs when [authentication succeeded].
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Session.ISessionManager.Sessions">
            <summary>
            Gets the sessions.
            </summary>
            <value>The sessions.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.LogSessionActivity(System.String,System.String,System.String,System.String,System.String,Jellyfin.Data.Entities.User)">
            <summary>
            Logs the user activity.
            </summary>
            <param name="appName">Type of the client.</param>
            <param name="appVersion">The app version.</param>
            <param name="deviceId">The device id.</param>
            <param name="deviceName">Name of the device.</param>
            <param name="remoteEndPoint">The remote end point.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.OnSessionControllerConnected(MediaBrowser.Controller.Session.SessionInfo)">
            <summary>
            Used to report that a session controller has connected.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.OnPlaybackStart(MediaBrowser.Model.Session.PlaybackStartInfo)">
            <summary>
            Used to report that playback has started for an item.
            </summary>
            <param name="info">The info.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.OnPlaybackProgress(MediaBrowser.Model.Session.PlaybackProgressInfo)">
            <summary>
            Used to report playback progress for an item.
            </summary>
            <param name="info">The info.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.OnPlaybackStopped(MediaBrowser.Model.Session.PlaybackStopInfo)">
            <summary>
            Used to report that playback has ended for an item.
            </summary>
            <param name="info">The info.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.ReportSessionEnded(System.String)">
            <summary>
            Reports the session ended.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendGeneralCommand(System.String,System.String,MediaBrowser.Model.Session.GeneralCommand,System.Threading.CancellationToken)">
            <summary>
            Sends the general command.
            </summary>
            <param name="controllingSessionId">The controlling session identifier.</param>
            <param name="sessionId">The session identifier.</param>
            <param name="command">The command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendMessageCommand(System.String,System.String,MediaBrowser.Model.Session.MessageCommand,System.Threading.CancellationToken)">
            <summary>
            Sends the message command.
            </summary>
            <param name="controllingSessionId">The controlling session identifier.</param>
            <param name="sessionId">The session id.</param>
            <param name="command">The command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendPlayCommand(System.String,System.String,MediaBrowser.Model.Session.PlayRequest,System.Threading.CancellationToken)">
            <summary>
            Sends the play command.
            </summary>
            <param name="controllingSessionId">The controlling session identifier.</param>
            <param name="sessionId">The session id.</param>
            <param name="command">The command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendSyncPlayCommand(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Model.SyncPlay.SendCommand,System.Threading.CancellationToken)">
            <summary>
            Sends a SyncPlayCommand to a session.
            </summary>
            <param name="session">The session.</param>
            <param name="command">The command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendSyncPlayGroupUpdate``1(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Model.SyncPlay.GroupUpdate{``0},System.Threading.CancellationToken)">
            <summary>
            Sends a SyncPlayGroupUpdate to a session.
            </summary>
            <param name="session">The session.</param>
            <param name="command">The group update.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendBrowseCommand(System.String,System.String,MediaBrowser.Model.Session.BrowseRequest,System.Threading.CancellationToken)">
            <summary>
            Sends the browse command.
            </summary>
            <param name="controllingSessionId">The controlling session identifier.</param>
            <param name="sessionId">The session id.</param>
            <param name="command">The command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendPlaystateCommand(System.String,System.String,MediaBrowser.Model.Session.PlaystateRequest,System.Threading.CancellationToken)">
            <summary>
            Sends the playstate command.
            </summary>
            <param name="controllingSessionId">The controlling session identifier.</param>
            <param name="sessionId">The session id.</param>
            <param name="command">The command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendMessageToAdminSessions``1(MediaBrowser.Model.Session.SessionMessageType,``0,System.Threading.CancellationToken)">
            <summary>
            Sends the message to admin sessions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <param name="data">The data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendMessageToUserSessions``1(System.Collections.Generic.List{System.Guid},MediaBrowser.Model.Session.SessionMessageType,``0,System.Threading.CancellationToken)">
            <summary>
            Sends the message to user sessions.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendMessageToUserDeviceSessions``1(System.String,MediaBrowser.Model.Session.SessionMessageType,``0,System.Threading.CancellationToken)">
            <summary>
            Sends the message to user device sessions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deviceId">The device identifier.</param>
            <param name="name">The name.</param>
            <param name="data">The data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendRestartRequiredNotification(System.Threading.CancellationToken)">
            <summary>
            Sends the restart required message.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendServerShutdownNotification(System.Threading.CancellationToken)">
            <summary>
            Sends the server shutdown notification.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendServerRestartNotification(System.Threading.CancellationToken)">
            <summary>
            Sends the server restart notification.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.AddAdditionalUser(System.String,System.Guid)">
            <summary>
            Adds the additional user.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="userId">The user identifier.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.RemoveAdditionalUser(System.String,System.Guid)">
            <summary>
            Removes the additional user.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="userId">The user identifier.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.ReportNowViewingItem(System.String,System.String)">
            <summary>
            Reports the now viewing item.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="itemId">The item identifier.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.ReportNowViewingItem(System.String,MediaBrowser.Model.Dto.BaseItemDto)">
            <summary>
            Reports the now viewing item.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.AuthenticateNewSession(MediaBrowser.Controller.Session.AuthenticationRequest)">
            <summary>
            Authenticates the new session.
            </summary>
            <param name="request">The request.</param>
            <returns>Task{SessionInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.AuthenticateQuickConnect(MediaBrowser.Controller.Session.AuthenticationRequest,System.String)">
            <summary>
            Authenticates a new session with quick connect.
            </summary>
            <param name="request">The request.</param>
            <param name="token">Quick connect access token.</param>
            <returns>Task{SessionInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.CreateNewSession(MediaBrowser.Controller.Session.AuthenticationRequest)">
            <summary>
            Creates the new session.
            </summary>
            <param name="request">The request.</param>
            <returns>Task&lt;AuthenticationResult&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.ReportCapabilities(System.String,MediaBrowser.Model.Session.ClientCapabilities)">
            <summary>
            Reports the capabilities.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="capabilities">The capabilities.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.ReportTranscodingInfo(System.String,MediaBrowser.Model.Session.TranscodingInfo)">
            <summary>
            Reports the transcoding information.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <param name="info">The information.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.ClearTranscodingInfo(System.String)">
            <summary>
            Clears the transcoding information.
            </summary>
            <param name="deviceId">The device identifier.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.GetSession(System.String,System.String,System.String)">
            <summary>
            Gets the session.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <param name="client">The client.</param>
            <param name="version">The version.</param>
            <returns>SessionInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.GetSessionByAuthenticationToken(System.String,System.String,System.String)">
            <summary>
            Gets the session by authentication token.
            </summary>
            <param name="token">The token.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="remoteEndpoint">The remote endpoint.</param>
            <returns>SessionInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.GetSessionByAuthenticationToken(MediaBrowser.Controller.Security.AuthenticationInfo,System.String,System.String,System.String)">
            <summary>
            Gets the session by authentication token.
            </summary>
            <param name="info">The information.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="remoteEndpoint">The remote endpoint.</param>
            <param name="appVersion">The application version.</param>
            <returns>Task&lt;SessionInfo&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.Logout(System.String)">
            <summary>
            Logouts the specified access token.
            </summary>
            <param name="accessToken">The access token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.RevokeUserTokens(System.Guid,System.String)">
            <summary>
            Revokes the user tokens.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.RevokeToken(System.String)">
            <summary>
            Revokes the token.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Session.SessionInfo">
            <summary>
            Class SessionInfo.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.RemoteEndPoint">
            <summary>
            Gets or sets the remote end point.
            </summary>
            <value>The remote end point.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.PlayableMediaTypes">
            <summary>
            Gets or sets the playable media types.
            </summary>
            <value>The playable media types.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.UserId">
            <summary>
            Gets or sets the user id.
            </summary>
            <value>The user id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.UserName">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.Client">
            <summary>
            Gets or sets the type of the client.
            </summary>
            <value>The type of the client.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.LastActivityDate">
            <summary>
            Gets or sets the last activity date.
            </summary>
            <value>The last activity date.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.LastPlaybackCheckIn">
            <summary>
            Gets or sets the last playback check in.
            </summary>
            <value>The last playback check in.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.DeviceName">
            <summary>
            Gets or sets the name of the device.
            </summary>
            <value>The name of the device.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.DeviceType">
            <summary>
            Gets or sets the type of the device.
            </summary>
            <value>The type of the device.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.NowPlayingItem">
            <summary>
            Gets or sets the now playing item.
            </summary>
            <value>The now playing item.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.DeviceId">
            <summary>
            Gets or sets the device id.
            </summary>
            <value>The device id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.ApplicationVersion">
            <summary>
            Gets or sets the application version.
            </summary>
            <value>The application version.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.SessionControllers">
            <summary>
            Gets or sets the session controller.
            </summary>
            <value>The session controller.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.SupportedCommands">
            <summary>
            Gets or sets the supported commands.
            </summary>
            <value>The supported commands.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Session.SessionInfo.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.Sorting.AlphanumComparator.Compare(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.Sorting.IBaseItemComparer">
            <summary>
            Interface IBaseItemComparer.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Sorting.IBaseItemComparer.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Sorting.IUserBaseItemComparer">
            <summary>
            Represents a BaseItem comparer that requires a User to perform it's comparison.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Sorting.IUserBaseItemComparer.User">
            <summary>
            Gets or sets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Sorting.IUserBaseItemComparer.UserManager">
            <summary>
            Gets or sets the user manager.
            </summary>
            <value>The user manager.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Sorting.IUserBaseItemComparer.UserDataRepository">
            <summary>
            Gets or sets the user data repository.
            </summary>
            <value>The user data repository.</value>
        </member>
        <member name="E:MediaBrowser.Controller.Subtitles.ISubtitleManager.SubtitleDownloadFailure">
            <summary>
            Occurs when [subtitle download failure].
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Subtitles.ISubtitleProvider})">
            <summary>
            Adds the parts.
            </summary>
            <param name="subtitleProviders">The subtitle providers.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.SearchSubtitles(MediaBrowser.Controller.Entities.Video,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Searches the subtitles.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.SearchSubtitles(MediaBrowser.Controller.Subtitles.SubtitleSearchRequest,System.Threading.CancellationToken)">
            <summary>
            Searches the subtitles.
            </summary>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{RemoteSubtitleInfo[]}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.DownloadSubtitles(MediaBrowser.Controller.Entities.Video,System.String,System.Threading.CancellationToken)">
            <summary>
            Downloads the subtitles.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.DownloadSubtitles(MediaBrowser.Controller.Entities.Video,MediaBrowser.Model.Configuration.LibraryOptions,System.String,System.Threading.CancellationToken)">
            <summary>
            Downloads the subtitles.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.UploadSubtitle(MediaBrowser.Controller.Entities.Video,MediaBrowser.Controller.Subtitles.SubtitleResponse)">
            <summary>
            Upload new subtitle.
            </summary>
            <param name="video">The video the subtitle belongs to.</param>
            <param name="response">The subtitle response.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.GetRemoteSubtitles(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the remote subtitles.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns><see cref="T:System.Threading.Tasks.Task`1" />.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.DeleteSubtitles(MediaBrowser.Controller.Entities.BaseItem,System.Int32)">
            <summary>
            Deletes the subtitles.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.GetSupportedProviders(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the providers.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Subtitles.ISubtitleProvider.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Subtitles.ISubtitleProvider.SupportedMediaTypes">
            <summary>
            Gets the supported media types.
            </summary>
            <value>The supported media types.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleProvider.Search(MediaBrowser.Controller.Subtitles.SubtitleSearchRequest,System.Threading.CancellationToken)">
            <summary>
            Searches the subtitles.
            </summary>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IEnumerable{RemoteSubtitleInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleProvider.GetSubtitles(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the subtitles.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{SubtitleResponse}.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Subtitles.SubtitleDownloadFailureEventArgs">
            <summary>
            An event that occurs when subtitle downloading fails.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Subtitles.SubtitleDownloadFailureEventArgs.Item">
            <summary>
            Gets or sets the item.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Subtitles.SubtitleDownloadFailureEventArgs.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Subtitles.SubtitleDownloadFailureEventArgs.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Sync.IHasDynamicAccess.GetSyncedFileInfo(System.String,MediaBrowser.Model.Sync.SyncTarget,System.Threading.CancellationToken)">
            <summary>
            Gets the synced file information.
            </summary>
            <param name="id">The identifier.</param>
            <param name="target">The target.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;SyncedFileInfo&gt;.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Sync.IRemoteSyncProvider">
            <summary>
            A marker interface.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Sync.IServerSyncProvider.SendFile(MediaBrowser.Model.Sync.SyncJob,System.String,System.IO.Stream,System.Boolean,System.String[],MediaBrowser.Model.Sync.SyncTarget,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Transfers the file.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Sync.ISupportsDirectCopy.SendFile(MediaBrowser.Model.Sync.SyncJob,System.String,System.String,System.Boolean,System.String[],MediaBrowser.Model.Sync.SyncTarget,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Sends the file.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Sync.ISyncProvider.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Sync.ISyncProvider.GetSyncTargets(System.String)">
            <summary>
            Gets the synchronize targets.
            </summary>
            <param name="userId">The user identifier.</param>
            <returns>IEnumerable&lt;SyncTarget&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Sync.ISyncProvider.GetAllSyncTargets">
            <summary>
            Gets all synchronize targets.
            </summary>
            <returns>IEnumerable&lt;SyncTarget&gt;.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Sync.SyncedFileInfo.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Sync.SyncedFileInfo.Protocol">
            <summary>
            Gets or sets the protocol.
            </summary>
            <value>The protocol.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Sync.SyncedFileInfo.RequiredHttpHeaders">
            <summary>
            Gets or sets the required HTTP headers.
            </summary>
            <value>The required HTTP headers.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Sync.SyncedFileInfo.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.GroupMember">
            <summary>
            Class GroupMember.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupMember.#ctor(MediaBrowser.Controller.Session.SessionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.GroupMember"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.GroupMember.Session">
            <summary>
            Gets the session.
            </summary>
            <value>The session.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.GroupMember.Ping">
            <summary>
            Gets or sets the ping, in milliseconds.
            </summary>
            <value>The ping.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.GroupMember.IsBuffering">
            <summary>
            Gets or sets a value indicating whether this member is buffering.
            </summary>
            <value><c>true</c> if member is buffering; <c>false</c> otherwise.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.GroupMember.IgnoreGroupWait">
            <summary>
            Gets or sets a value indicating whether this member is following group playback.
            </summary>
            <value><c>true</c> to ignore member on group wait; <c>false</c> if they're following group playback.</value>
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState">
            <summary>
            Class AbstractGroupState.
            </summary>
            <remarks>
            Class is not thread-safe, external locking is required when accessing methods.
            </remarks>
        </member>
        <member name="F:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState"/> class.
            </summary>
            <param name="loggerFactory">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> interface.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.LoggerFactory">
            <summary>
            Gets the logger factory.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.SessionJoined(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.SessionLeaving(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.IGroupPlaybackRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PlayGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetPlaylistItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.RemoveFromPlaylistGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.MovePlaylistItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.QueueGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.UnpauseGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PauseGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.StopGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.SeekGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.BufferGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.ReadyGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.NextItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PreviousItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetRepeatModeGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetShuffleModeGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PingGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.IgnoreWaitGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.AbstractGroupState.SendGroupStateUpdate(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupPlaybackRequest,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Sends a group state update to all group.
            </summary>
            <param name="context">The context of the state.</param>
            <param name="reason">The reason of the state change.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState">
            <summary>
            Class IdleGroupState.
            </summary>
            <remarks>
            Class is not thread-safe, external locking is required when accessing methods.
            </remarks>
        </member>
        <member name="F:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState"/> class.
            </summary>
            <param name="loggerFactory">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> interface.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState.Type">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState.SessionJoined(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState.SessionLeaving(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PlayGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.UnpauseGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PauseGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.StopGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.SeekGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.BufferGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.ReadyGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.NextItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.IdleGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PreviousItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState">
            <summary>
            Class PausedGroupState.
            </summary>
            <remarks>
            Class is not thread-safe, external locking is required when accessing methods.
            </remarks>
        </member>
        <member name="F:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState"/> class.
            </summary>
            <param name="loggerFactory">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> interface.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState.Type">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState.SessionJoined(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState.SessionLeaving(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PlayGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.UnpauseGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PauseGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.StopGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.SeekGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.BufferGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.ReadyGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.NextItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PausedGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PreviousItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState">
            <summary>
            Class PlayingGroupState.
            </summary>
            <remarks>
            Class is not thread-safe, external locking is required when accessing methods.
            </remarks>
        </member>
        <member name="F:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState"/> class.
            </summary>
            <param name="loggerFactory">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> interface.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState.IgnoreBuffering">
            <summary>
            Gets or sets a value indicating whether requests for buffering should be ignored.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState.SessionJoined(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState.SessionLeaving(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PlayGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.UnpauseGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PauseGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.StopGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.SeekGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.BufferGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.ReadyGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.NextItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.PlayingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PreviousItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState">
            <summary>
            Class WaitingGroupState.
            </summary>
            <remarks>
            Class is not thread-safe, external locking is required when accessing methods.
            </remarks>
        </member>
        <member name="F:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState"/> class.
            </summary>
            <param name="loggerFactory">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> interface.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.ResumePlaying">
            <summary>
            Gets or sets a value indicating whether playback should resume when group is ready.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.InitialStateSet">
            <summary>
            Gets or sets a value indicating whether the initial state has been set.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.InitialState">
            <summary>
            Gets or sets the group state before the first ever event.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.SessionJoined(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.SessionLeaving(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PlayGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetPlaylistItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.UnpauseGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PauseGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.StopGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.SeekGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.BufferGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.ReadyGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.NextItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PreviousItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.GroupStates.WaitingGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.IgnoreWaitGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.IGroupPlaybackRequest">
            <summary>
            Interface IGroupPlaybackRequest.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.IGroupPlaybackRequest.Action">
            <summary>
            Gets the playback request type.
            </summary>
            <returns>The playback request type.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupPlaybackRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Applies the request to a group.
            </summary>
            <param name="context">The context of the state.</param>
            <param name="state">The current state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.IGroupState">
            <summary>
            Interface IGroupState.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.IGroupState.Type">
            <summary>
            Gets the group state type.
            </summary>
            <value>The group state type.</value>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.SessionJoined(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a session that joined the group.
            </summary>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.SessionLeaving(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a session that is leaving the group.
            </summary>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.IGroupPlaybackRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Generic handler. Context's state can change.
            </summary>
            <param name="request">The generic request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PlayGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a play request from a session. Context's state can change.
            </summary>
            <param name="request">The play request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetPlaylistItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a set-playlist-item request from a session. Context's state can change.
            </summary>
            <param name="request">The set-playlist-item request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.RemoveFromPlaylistGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a remove-items request from a session. Context's state can change.
            </summary>
            <param name="request">The remove-items request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.MovePlaylistItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a move-playlist-item request from a session. Context's state should not change.
            </summary>
            <param name="request">The move-playlist-item request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.QueueGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a queue request from a session. Context's state should not change.
            </summary>
            <param name="request">The queue request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.UnpauseGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles an unpause request from a session. Context's state can change.
            </summary>
            <param name="request">The unpause request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PauseGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a pause request from a session. Context's state can change.
            </summary>
            <param name="request">The pause request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.StopGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a stop request from a session. Context's state can change.
            </summary>
            <param name="request">The stop request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.SeekGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a seek request from a session. Context's state can change.
            </summary>
            <param name="request">The seek request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.BufferGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a buffer request from a session. Context's state can change.
            </summary>
            <param name="request">The buffer request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.ReadyGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a ready request from a session. Context's state can change.
            </summary>
            <param name="request">The ready request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.NextItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a next-item request from a session. Context's state can change.
            </summary>
            <param name="request">The next-item request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PreviousItemGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a previous-item request from a session. Context's state can change.
            </summary>
            <param name="request">The previous-item request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetRepeatModeGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a set-repeat-mode request from a session. Context's state should not change.
            </summary>
            <param name="request">The repeat-mode request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetShuffleModeGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a set-shuffle-mode request from a session. Context's state should not change.
            </summary>
            <param name="request">The shuffle-mode request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.PingGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Updates the ping of a session. Context's state should not change.
            </summary>
            <param name="request">The ping request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupState.HandleRequest(MediaBrowser.Controller.SyncPlay.PlaybackRequests.IgnoreWaitGroupRequest,MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Model.SyncPlay.GroupStateType,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <summary>
            Handles a ignore-wait request from a session. Context's state can change.
            </summary>
            <param name="request">The ignore-wait request.</param>
            <param name="context">The context of the state.</param>
            <param name="prevState">The previous state.</param>
            <param name="session">The session.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.IGroupStateContext">
            <summary>
            Interface IGroupStateContext.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.IGroupStateContext.DefaultPing">
            <summary>
            Gets the default ping value used for sessions, in milliseconds.
            </summary>
            <value>The default ping value used for sessions, in milliseconds.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.IGroupStateContext.TimeSyncOffset">
            <summary>
            Gets the maximum time offset error accepted for dates reported by clients, in milliseconds.
            </summary>
            <value>The maximum offset error accepted, in milliseconds.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.IGroupStateContext.MaxPlaybackOffset">
            <summary>
            Gets the maximum offset error accepted for position reported by clients, in milliseconds.
            </summary>
            <value>The maximum offset error accepted, in milliseconds.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.IGroupStateContext.GroupId">
            <summary>
            Gets the group identifier.
            </summary>
            <value>The group identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.IGroupStateContext.PositionTicks">
            <summary>
            Gets or sets the position ticks.
            </summary>
            <value>The position ticks.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.IGroupStateContext.LastActivity">
            <summary>
            Gets or sets the last activity.
            </summary>
            <value>The last activity.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.IGroupStateContext.PlayQueue">
            <summary>
            Gets the play queue.
            </summary>
            <value>The play queue.</value>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.SetState(MediaBrowser.Controller.SyncPlay.IGroupState)">
            <summary>
            Sets a new state.
            </summary>
            <param name="state">The new state.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.SendGroupUpdate``1(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Model.SyncPlay.SyncPlayBroadcastType,MediaBrowser.Model.SyncPlay.GroupUpdate{``0},System.Threading.CancellationToken)">
            <summary>
            Sends a GroupUpdate message to the interested sessions.
            </summary>
            <typeparam name="T">The type of the data of the message.</typeparam>
            <param name="from">The current session.</param>
            <param name="type">The filtering type.</param>
            <param name="message">The message to send.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.SendCommand(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Model.SyncPlay.SyncPlayBroadcastType,MediaBrowser.Model.SyncPlay.SendCommand,System.Threading.CancellationToken)">
            <summary>
            Sends a playback command to the interested sessions.
            </summary>
            <param name="from">The current session.</param>
            <param name="type">The filtering type.</param>
            <param name="message">The message to send.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.NewSyncPlayCommand(MediaBrowser.Model.SyncPlay.SendCommandType)">
            <summary>
            Builds a new playback command with some default values.
            </summary>
            <param name="type">The command type.</param>
            <returns>The command.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.NewSyncPlayGroupUpdate``1(MediaBrowser.Model.SyncPlay.GroupUpdateType,``0)">
            <summary>
            Builds a new group update message.
            </summary>
            <typeparam name="T">The type of the data of the message.</typeparam>
            <param name="type">The update type.</param>
            <param name="data">The data to send.</param>
            <returns>The group update.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.SanitizePositionTicks(System.Nullable{System.Int64})">
            <summary>
            Sanitizes the PositionTicks, considers the current playing item when available.
            </summary>
            <param name="positionTicks">The PositionTicks.</param>
            <returns>The sanitized position ticks.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.UpdatePing(MediaBrowser.Controller.Session.SessionInfo,System.Int64)">
            <summary>
            Updates the ping of a session, in milliseconds.
            </summary>
            <param name="session">The session.</param>
            <param name="ping">The ping, in milliseconds.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.GetHighestPing">
            <summary>
            Gets the highest ping in the group, in milliseconds.
            </summary>
            <returns>The highest ping in the group.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.SetBuffering(MediaBrowser.Controller.Session.SessionInfo,System.Boolean)">
            <summary>
            Sets the session's buffering state.
            </summary>
            <param name="session">The session.</param>
            <param name="isBuffering">The state.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.SetAllBuffering(System.Boolean)">
            <summary>
            Sets the buffering state of all the sessions.
            </summary>
            <param name="isBuffering">The state.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.IsBuffering">
            <summary>
            Gets the group buffering state.
            </summary>
            <returns><c>true</c> if there is a session buffering in the group; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.SetIgnoreGroupWait(MediaBrowser.Controller.Session.SessionInfo,System.Boolean)">
            <summary>
            Sets the session's group wait state.
            </summary>
            <param name="session">The session.</param>
            <param name="ignoreGroupWait">The state.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.SetPlayQueue(System.Collections.Generic.IReadOnlyList{System.Guid},System.Int32,System.Int64)">
            <summary>
            Sets a new play queue.
            </summary>
            <param name="playQueue">The new play queue.</param>
            <param name="playingItemPosition">The playing item position in the play queue.</param>
            <param name="startPositionTicks">The start position ticks.</param>
            <returns><c>true</c> if the play queue has been changed; <c>false</c> if something went wrong.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.SetPlayingItem(System.Guid)">
            <summary>
            Sets the playing item.
            </summary>
            <param name="playlistItemId">The new playing item identifier.</param>
            <returns><c>true</c> if the play queue has been changed; <c>false</c> if something went wrong.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.RemoveFromPlayQueue(System.Collections.Generic.IReadOnlyList{System.Guid})">
            <summary>
            Removes items from the play queue.
            </summary>
            <param name="playlistItemIds">The items to remove.</param>
            <returns><c>true</c> if playing item got removed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.MoveItemInPlayQueue(System.Guid,System.Int32)">
            <summary>
            Moves an item in the play queue.
            </summary>
            <param name="playlistItemId">The playlist identifier of the item to move.</param>
            <param name="newIndex">The new position.</param>
            <returns><c>true</c> if item has been moved; <c>false</c> if something went wrong.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.AddToPlayQueue(System.Collections.Generic.IReadOnlyList{System.Guid},MediaBrowser.Model.SyncPlay.GroupQueueMode)">
            <summary>
            Updates the play queue.
            </summary>
            <param name="newItems">The new items to add to the play queue.</param>
            <param name="mode">The mode with which the items will be added.</param>
            <returns><c>true</c> if the play queue has been changed; <c>false</c> if something went wrong.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.RestartCurrentItem">
            <summary>
            Restarts current item in play queue.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.NextItemInQueue">
            <summary>
            Picks next item in play queue.
            </summary>
            <returns><c>true</c> if the item changed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.PreviousItemInQueue">
            <summary>
            Picks previous item in play queue.
            </summary>
            <returns><c>true</c> if the item changed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.SetRepeatMode(MediaBrowser.Model.SyncPlay.GroupRepeatMode)">
            <summary>
            Sets the repeat mode.
            </summary>
            <param name="mode">The new mode.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.SetShuffleMode(MediaBrowser.Model.SyncPlay.GroupShuffleMode)">
            <summary>
            Sets the shuffle mode.
            </summary>
            <param name="mode">The new mode.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.IGroupStateContext.GetPlayQueueUpdate(MediaBrowser.Model.SyncPlay.PlayQueueUpdateReason)">
            <summary>
            Creates a play queue update.
            </summary>
            <param name="reason">The reason for the update.</param>
            <returns>The play queue update.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.ISyncPlayManager">
            <summary>
            Interface ISyncPlayManager.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.ISyncPlayManager.NewGroup(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Controller.SyncPlay.Requests.NewGroupRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new group.
            </summary>
            <param name="session">The session that's creating the group.</param>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.ISyncPlayManager.JoinGroup(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Controller.SyncPlay.Requests.JoinGroupRequest,System.Threading.CancellationToken)">
            <summary>
            Adds the session to a group.
            </summary>
            <param name="session">The session.</param>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.ISyncPlayManager.LeaveGroup(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Controller.SyncPlay.Requests.LeaveGroupRequest,System.Threading.CancellationToken)">
            <summary>
            Removes the session from a group.
            </summary>
            <param name="session">The session.</param>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.ISyncPlayManager.ListGroups(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Controller.SyncPlay.Requests.ListGroupsRequest)">
            <summary>
            Gets list of available groups for a session.
            </summary>
            <param name="session">The session.</param>
            <param name="request">The request.</param>
            <returns>The list of available groups.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.ISyncPlayManager.HandleRequest(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Controller.SyncPlay.IGroupPlaybackRequest,System.Threading.CancellationToken)">
            <summary>
            Handle a request by a session in a group.
            </summary>
            <param name="session">The session.</param>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.ISyncPlayManager.IsUserActive(System.Guid)">
            <summary>
            Checks whether a user has an active session using SyncPlay.
            </summary>
            <param name="userId">The user identifier to check.</param>
            <returns><c>true</c> if the user is using SyncPlay; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.ISyncPlayRequest">
            <summary>
            Interface ISyncPlayRequest.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.ISyncPlayRequest.Type">
            <summary>
            Gets the request type.
            </summary>
            <returns>The request type.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.AbstractPlaybackRequest">
            <summary>
            Class AbstractPlaybackRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.AbstractPlaybackRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.AbstractPlaybackRequest"/> class.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.AbstractPlaybackRequest.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.AbstractPlaybackRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.AbstractPlaybackRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.BufferGroupRequest">
            <summary>
            Class BufferGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.BufferGroupRequest.#ctor(System.DateTime,System.Int64,System.Boolean,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.BufferGroupRequest"/> class.
            </summary>
            <param name="when">When the request has been made, as reported by the client.</param>
            <param name="positionTicks">The position ticks.</param>
            <param name="isPlaying">Whether the client playback is unpaused.</param>
            <param name="playlistItemId">The playlist item identifier of the playing item.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.BufferGroupRequest.When">
            <summary>
            Gets when the request has been made by the client.
            </summary>
            <value>The date of the request.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.BufferGroupRequest.PositionTicks">
            <summary>
            Gets the position ticks.
            </summary>
            <value>The position ticks.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.BufferGroupRequest.IsPlaying">
            <summary>
            Gets a value indicating whether the client playback is unpaused.
            </summary>
            <value>The client playback status.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.BufferGroupRequest.PlaylistItemId">
            <summary>
            Gets the playlist item identifier of the playing item.
            </summary>
            <value>The playlist item identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.BufferGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.BufferGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.IgnoreWaitGroupRequest">
            <summary>
            Class IgnoreWaitGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.IgnoreWaitGroupRequest.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.IgnoreWaitGroupRequest"/> class.
            </summary>
            <param name="ignoreWait">Whether the client should be ignored.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.IgnoreWaitGroupRequest.IgnoreWait">
            <summary>
            Gets a value indicating whether the client should be ignored.
            </summary>
            <value>The client group-wait status.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.IgnoreWaitGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.IgnoreWaitGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.MovePlaylistItemGroupRequest">
            <summary>
            Class MovePlaylistItemGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.MovePlaylistItemGroupRequest.#ctor(System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.MovePlaylistItemGroupRequest"/> class.
            </summary>
            <param name="playlistItemId">The playlist identifier of the item.</param>
            <param name="newIndex">The new position.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.MovePlaylistItemGroupRequest.PlaylistItemId">
            <summary>
            Gets the playlist identifier of the item.
            </summary>
            <value>The playlist identifier of the item.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.MovePlaylistItemGroupRequest.NewIndex">
            <summary>
            Gets the new position.
            </summary>
            <value>The new position.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.MovePlaylistItemGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.MovePlaylistItemGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.NextItemGroupRequest">
            <summary>
            Class NextItemGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.NextItemGroupRequest.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.NextItemGroupRequest"/> class.
            </summary>
            <param name="playlistItemId">The playing item identifier.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.NextItemGroupRequest.PlaylistItemId">
            <summary>
            Gets the playing item identifier.
            </summary>
            <value>The playing item identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.NextItemGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.NextItemGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PauseGroupRequest">
            <summary>
            Class PauseGroupRequest.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PauseGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PauseGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PingGroupRequest">
            <summary>
            Class PingGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PingGroupRequest.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PingGroupRequest"/> class.
            </summary>
            <param name="ping">The ping time.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PingGroupRequest.Ping">
            <summary>
            Gets the ping time.
            </summary>
            <value>The ping time.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PingGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PingGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PlayGroupRequest">
            <summary>
            Class PlayGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PlayGroupRequest.#ctor(System.Collections.Generic.IReadOnlyList{System.Guid},System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PlayGroupRequest"/> class.
            </summary>
            <param name="playingQueue">The playing queue.</param>
            <param name="playingItemPosition">The playing item position.</param>
            <param name="startPositionTicks">The start position ticks.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PlayGroupRequest.PlayingQueue">
            <summary>
            Gets the playing queue.
            </summary>
            <value>The playing queue.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PlayGroupRequest.PlayingItemPosition">
            <summary>
            Gets the position of the playing item in the queue.
            </summary>
            <value>The playing item position.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PlayGroupRequest.StartPositionTicks">
            <summary>
            Gets the start position ticks.
            </summary>
            <value>The start position ticks.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PlayGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PlayGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PreviousItemGroupRequest">
            <summary>
            Class PreviousItemGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PreviousItemGroupRequest.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PreviousItemGroupRequest"/> class.
            </summary>
            <param name="playlistItemId">The playing item identifier.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PreviousItemGroupRequest.PlaylistItemId">
            <summary>
            Gets the playing item identifier.
            </summary>
            <value>The playing item identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PreviousItemGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.PreviousItemGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.QueueGroupRequest">
            <summary>
            Class QueueGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.QueueGroupRequest.#ctor(System.Collections.Generic.IReadOnlyList{System.Guid},MediaBrowser.Model.SyncPlay.GroupQueueMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.QueueGroupRequest"/> class.
            </summary>
            <param name="items">The items to add to the queue.</param>
            <param name="mode">The enqueue mode.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.QueueGroupRequest.ItemIds">
            <summary>
            Gets the items to enqueue.
            </summary>
            <value>The items to enqueue.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.QueueGroupRequest.Mode">
            <summary>
            Gets the mode in which to add the new items.
            </summary>
            <value>The enqueue mode.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.QueueGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.QueueGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.ReadyGroupRequest">
            <summary>
            Class ReadyGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.ReadyGroupRequest.#ctor(System.DateTime,System.Int64,System.Boolean,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.ReadyGroupRequest"/> class.
            </summary>
            <param name="when">When the request has been made, as reported by the client.</param>
            <param name="positionTicks">The position ticks.</param>
            <param name="isPlaying">Whether the client playback is unpaused.</param>
            <param name="playlistItemId">The playlist item identifier of the playing item.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.ReadyGroupRequest.When">
            <summary>
            Gets when the request has been made by the client.
            </summary>
            <value>The date of the request.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.ReadyGroupRequest.PositionTicks">
            <summary>
            Gets the position ticks.
            </summary>
            <value>The position ticks.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.ReadyGroupRequest.IsPlaying">
            <summary>
            Gets a value indicating whether the client playback is unpaused.
            </summary>
            <value>The client playback status.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.ReadyGroupRequest.PlaylistItemId">
            <summary>
            Gets the playlist item identifier of the playing item.
            </summary>
            <value>The playlist item identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.ReadyGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.ReadyGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.RemoveFromPlaylistGroupRequest">
            <summary>
            Class RemoveFromPlaylistGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.RemoveFromPlaylistGroupRequest.#ctor(System.Collections.Generic.IReadOnlyList{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.RemoveFromPlaylistGroupRequest"/> class.
            </summary>
            <param name="items">The playlist ids of the items to remove.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.RemoveFromPlaylistGroupRequest.PlaylistItemIds">
            <summary>
            Gets the playlist identifiers ot the items.
            </summary>
            <value>The playlist identifiers ot the items.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.RemoveFromPlaylistGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.RemoveFromPlaylistGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SeekGroupRequest">
            <summary>
            Class SeekGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SeekGroupRequest.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SeekGroupRequest"/> class.
            </summary>
            <param name="positionTicks">The position ticks.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SeekGroupRequest.PositionTicks">
            <summary>
            Gets the position ticks.
            </summary>
            <value>The position ticks.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SeekGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SeekGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetPlaylistItemGroupRequest">
            <summary>
            Class SetPlaylistItemGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetPlaylistItemGroupRequest.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetPlaylistItemGroupRequest"/> class.
            </summary>
            <param name="playlistItemId">The playlist identifier of the item.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetPlaylistItemGroupRequest.PlaylistItemId">
            <summary>
            Gets the playlist identifier of the playing item.
            </summary>
            <value>The playlist identifier of the playing item.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetPlaylistItemGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetPlaylistItemGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetRepeatModeGroupRequest">
            <summary>
            Class SetRepeatModeGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetRepeatModeGroupRequest.#ctor(MediaBrowser.Model.SyncPlay.GroupRepeatMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetRepeatModeGroupRequest"/> class.
            </summary>
            <param name="mode">The repeat mode.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetRepeatModeGroupRequest.Mode">
            <summary>
            Gets the repeat mode.
            </summary>
            <value>The repeat mode.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetRepeatModeGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetRepeatModeGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetShuffleModeGroupRequest">
            <summary>
            Class SetShuffleModeGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetShuffleModeGroupRequest.#ctor(MediaBrowser.Model.SyncPlay.GroupShuffleMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetShuffleModeGroupRequest"/> class.
            </summary>
            <param name="mode">The shuffle mode.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetShuffleModeGroupRequest.Mode">
            <summary>
            Gets the shuffle mode.
            </summary>
            <value>The shuffle mode.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetShuffleModeGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.SetShuffleModeGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.StopGroupRequest">
            <summary>
            Class StopGroupRequest.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.StopGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.StopGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.PlaybackRequests.UnpauseGroupRequest">
            <summary>
            Class UnpauseGroupRequest.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.PlaybackRequests.UnpauseGroupRequest.Action">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.PlaybackRequests.UnpauseGroupRequest.Apply(MediaBrowser.Controller.SyncPlay.IGroupStateContext,MediaBrowser.Controller.SyncPlay.IGroupState,MediaBrowser.Controller.Session.SessionInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager">
            <summary>
            Class PlayQueueManager.
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.NoPlayingItemIndex">
            <summary>
            Placeholder index for when no item is playing.
            </summary>
            <value>The no-playing item index.</value>
        </member>
        <member name="F:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager._randomNumberGenerator">
            <summary>
            Random number generator used to shuffle lists.
            </summary>
            <value>The random number generator.</value>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager" /> class.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.PlayingItemIndex">
            <summary>
            Gets the playing item index.
            </summary>
            <value>The playing item index.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.LastChange">
            <summary>
            Gets the last time the queue has been changed.
            </summary>
            <value>The last time the queue has been changed.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.ShuffleMode">
            <summary>
            Gets the shuffle mode.
            </summary>
            <value>The shuffle mode.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.RepeatMode">
            <summary>
            Gets the repeat mode.
            </summary>
            <value>The repeat mode.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.SortedPlaylist">
            <summary>
            Gets or sets the sorted playlist.
            </summary>
            <value>The sorted playlist, or play queue of the group.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.ShuffledPlaylist">
            <summary>
            Gets or sets the shuffled playlist.
            </summary>
            <value>The shuffled playlist, or play queue of the group.</value>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.IsItemPlaying">
            <summary>
            Checks if an item is playing.
            </summary>
            <returns><c>true</c> if an item is playing; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.GetPlaylist">
            <summary>
            Gets the current playlist considering the shuffle mode.
            </summary>
            <returns>The playlist.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.SetPlaylist(System.Collections.Generic.IReadOnlyList{System.Guid})">
            <summary>
            Sets a new playlist. Playing item is reset.
            </summary>
            <param name="items">The new items of the playlist.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.Queue(System.Collections.Generic.IReadOnlyList{System.Guid})">
            <summary>
            Appends new items to the playlist. The specified order is mantained.
            </summary>
            <param name="items">The items to add to the playlist.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.ShufflePlaylist">
            <summary>
            Shuffles the playlist. Shuffle mode is changed. The playlist gets re-shuffled if already shuffled.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.RestoreSortedPlaylist">
            <summary>
            Resets the playlist to sorted mode. Shuffle mode is changed.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.ClearPlaylist(System.Boolean)">
            <summary>
            Clears the playlist. Shuffle mode is preserved.
            </summary>
            <param name="clearPlayingItem">Whether to remove the playing item as well.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.QueueNext(System.Collections.Generic.IReadOnlyList{System.Guid})">
            <summary>
            Adds new items to the playlist right after the playing item. The specified order is mantained.
            </summary>
            <param name="items">The items to add to the playlist.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.GetPlayingItemPlaylistId">
            <summary>
            Gets playlist identifier of the playing item, if any.
            </summary>
            <returns>The playlist identifier of the playing item.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.GetPlayingItemId">
            <summary>
            Gets the playing item identifier, if any.
            </summary>
            <returns>The playing item identifier.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.SetPlayingItemById(System.Guid)">
            <summary>
            Sets the playing item using its identifier. If not in the playlist, the playing item is reset.
            </summary>
            <param name="itemId">The new playing item identifier.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.SetPlayingItemByPlaylistId(System.Guid)">
            <summary>
            Sets the playing item using its playlist identifier. If not in the playlist, the playing item is reset.
            </summary>
            <param name="playlistItemId">The new playing item identifier.</param>
            <returns><c>true</c> if playing item has been set; <c>false</c> if item is not in the playlist.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.SetPlayingItemByIndex(System.Int32)">
            <summary>
            Sets the playing item using its position. If not in range, the playing item is reset.
            </summary>
            <param name="playlistIndex">The new playing item index.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.RemoveFromPlaylist(System.Collections.Generic.IReadOnlyList{System.Guid})">
            <summary>
            Removes items from the playlist. If not removed, the playing item is preserved.
            </summary>
            <param name="playlistItemIds">The items to remove.</param>
            <returns><c>true</c> if playing item got removed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.MovePlaylistItem(System.Guid,System.Int32)">
            <summary>
            Moves an item in the playlist to another position.
            </summary>
            <param name="playlistItemId">The item to move.</param>
            <param name="newIndex">The new position.</param>
            <returns><c>true</c> if the item has been moved; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.Reset">
            <summary>
            Resets the playlist to its initial state.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.SetRepeatMode(MediaBrowser.Model.SyncPlay.GroupRepeatMode)">
            <summary>
            Sets the repeat mode.
            </summary>
            <param name="mode">The new mode.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.SetShuffleMode(MediaBrowser.Model.SyncPlay.GroupShuffleMode)">
            <summary>
            Sets the shuffle mode.
            </summary>
            <param name="mode">The new mode.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.ToggleShuffleMode">
            <summary>
            Toggles the shuffle mode between sorted and shuffled.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.GetNextItemPlaylistId">
            <summary>
            Gets the next item in the playlist considering repeat mode and shuffle mode.
            </summary>
            <returns>The next item in the playlist.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.Next">
            <summary>
            Sets the next item in the queue as playing item.
            </summary>
            <returns><c>true</c> if the playing item changed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.Previous">
            <summary>
            Sets the previous item in the queue as playing item.
            </summary>
            <returns><c>true</c> if the playing item changed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles a given list.
            </summary>
            <param name="list">The list to shuffle.</param>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.CreateQueueItemsFromArray(System.Collections.Generic.IReadOnlyList{System.Guid})">
            <summary>
            Creates a list from the array of items. Each item is given an unique playlist identifier.
            </summary>
            <returns>The list of queue items.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.GetPlaylistInternal">
            <summary>
            Gets the current playlist considering the shuffle mode.
            </summary>
            <returns>The playlist.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Queue.PlayQueueManager.GetPlayingItem">
            <summary>
            Gets the current playing item, depending on the shuffle mode.
            </summary>
            <returns>The playing item.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.Requests.JoinGroupRequest">
            <summary>
            Class JoinGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Requests.JoinGroupRequest.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.Requests.JoinGroupRequest"/> class.
            </summary>
            <param name="groupId">The identifier of the group to join.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.Requests.JoinGroupRequest.GroupId">
            <summary>
            Gets the group identifier.
            </summary>
            <value>The identifier of the group to join.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.Requests.JoinGroupRequest.Type">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.Requests.LeaveGroupRequest">
            <summary>
            Class LeaveGroupRequest.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.Requests.LeaveGroupRequest.Type">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.Requests.ListGroupsRequest">
            <summary>
            Class ListGroupsRequest.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.Requests.ListGroupsRequest.Type">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Controller.SyncPlay.Requests.NewGroupRequest">
            <summary>
            Class NewGroupRequest.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.SyncPlay.Requests.NewGroupRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.SyncPlay.Requests.NewGroupRequest"/> class.
            </summary>
            <param name="groupName">The name of the new group.</param>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.Requests.NewGroupRequest.GroupName">
            <summary>
            Gets the group name.
            </summary>
            <value>The name of the new group.</value>
        </member>
        <member name="P:MediaBrowser.Controller.SyncPlay.Requests.NewGroupRequest.Type">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Controller.TV.ITVSeriesManager.GetNextUp(MediaBrowser.Model.Querying.NextUpQuery,MediaBrowser.Controller.Dto.DtoOptions)">
            <summary>
            Gets the next up.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.TV.ITVSeriesManager.GetNextUp(MediaBrowser.Model.Querying.NextUpQuery,MediaBrowser.Controller.Entities.BaseItem[],MediaBrowser.Controller.Dto.DtoOptions)">
            <summary>
            Gets the next up.
            </summary>
        </member>
    </members>
</doc>
